// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using IqSoft.CP.DAL;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace IqSoft.CP.DAL
{
    public partial class IqSoftCorePlatformEntities
    {
        private IqSoftCorePlatformEntitiesProcedures _procedures;

        public virtual IqSoftCorePlatformEntitiesProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new IqSoftCorePlatformEntitiesProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IqSoftCorePlatformEntitiesProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<spCreateWebSiteMenuCopy>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetAccountLock>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetAccountLockById>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetBetShopLock>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetBonusLock>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetClientLock>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetPaymentRequestLock>().HasNoKey().ToView(null);
            modelBuilder.Entity<spObjectChangeHistory>().HasNoKey().ToView(null);
            modelBuilder.Entity<spUpdateClientSession>().HasNoKey().ToView(null);
        }
    }

    public interface IIqSoftCorePlatformEntitiesProceduresContract
    {
        Task<int> sp_CreateWebSiteMenuCopyAsync(int? FromPartner, int? ToPartner, int? MenuId, CancellationToken cancellationToken = default);
        Task<int> sp_GetAccountLockAsync(long? objectId, int? objectTypeId, string currencyId, int? accountTypeId, CancellationToken cancellationToken = default);
        Task<int> sp_GetAccountLockByIdAsync(long? id, CancellationToken cancellationToken = default);
        Task<int> sp_GetBetShopLockAsync(int? id, CancellationToken cancellationToken = default);
        Task<int> sp_GetBonusLockAsync(int? BonusId, CancellationToken cancellationToken = default);
        Task<int> sp_GetClientLockAsync(int? ClientId, CancellationToken cancellationToken = default);
        Task<int> sp_GetPaymentRequestLockAsync(long? RequestId, CancellationToken cancellationToken = default);
        Task<List<spObjectChangeHistory>> sp_ObjectChangeHistoryAsync(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeId, CancellationToken cancellationToken = default);
        Task<int> sp_UpdateClientSessionAsync(long? Id, int? ClientId, int? ProductId, string CurrentPage, CancellationToken cancellationToken = default);
    }

    public partial class IqSoftCorePlatformEntitiesProcedures
    {
        private readonly IqSoftCorePlatformEntities _context;

        public IqSoftCorePlatformEntitiesProcedures(IqSoftCorePlatformEntities context)
        {
            _context = context;
        }

        public virtual async Task<int> sp_CreateWebSiteMenuCopyAsync(int? FromPartner, int? ToPartner, int? MenuId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromPartner",
                    Value = FromPartner ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ToPartner",
                    Value = ToPartner ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MenuId",
                    Value = MenuId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_CreateWebSiteMenuCopy] @FromPartner, @ToPartner, @MenuId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetAccountLockAsync(long? objectId, int? objectTypeId, string currencyId, int? accountTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "objectId",
                    Value = objectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "objectTypeId",
                    Value = objectTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "currencyId",
                    Size = 5,
                    Value = currencyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "accountTypeId",
                    Value = accountTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetAccountLock] @objectId, @objectTypeId, @currencyId, @accountTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetAccountLockByIdAsync(long? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetAccountLockById] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetBetShopLockAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetBetShopLock] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetBonusLockAsync(int? BonusId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BonusId",
                    Value = BonusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetBonusLock] @BonusId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetClientLockAsync(int? ClientId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClientId",
                    Value = ClientId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetClientLock] @ClientId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_GetPaymentRequestLockAsync(long? RequestId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RequestId",
                    Value = RequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_GetPaymentRequestLock] @RequestId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spObjectChangeHistory>> sp_ObjectChangeHistoryAsync(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Scale = 3,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Scale = 3,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime2,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectTypeId",
                    Value = ObjectTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spObjectChangeHistory>("EXEC @returnValue = [dbo].[sp_ObjectChangeHistory] @FromDate, @ToDate, @ObjectTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> sp_UpdateClientSessionAsync(long? Id, int? ClientId, int? ProductId, string CurrentPage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "ClientId",
                    Value = ClientId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductId",
                    Value = ProductId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrentPage",
                    Size = 50,
                    Value = CurrentPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_UpdateClientSession] @Id, @ClientId, @ProductId, @CurrentPage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
