// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;

namespace IqSoft.CP.DAL
{
    public partial class IqSoftCorePlatformEntities
    {

        [DbFunction("fn_Account", "dbo")]
        public IQueryable<fnAccount> fn_Account(string languageId)
        {
            return FromExpression(() => fn_Account(languageId));
        }

        [DbFunction("fn_AccountType", "dbo")]
        public IQueryable<fnAccountType> fn_AccountType(string LanguageId)
        {
            return FromExpression(() => fn_AccountType(LanguageId));
        }

        [DbFunction("fn_ActionLog", "dbo")]
        public IQueryable<fnActionLog> fn_ActionLog(string LanguageId, long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ActionLog(LanguageId, FromDate, ToDate));
        }

        [DbFunction("fn_AdminShiftReport", "dbo")]
        public IQueryable<fnAdminShiftReport> fn_AdminShiftReport()
        {
            return FromExpression(() => fn_AdminShiftReport());
        }

        [DbFunction("fn_AffiliateClient", "dbo")]
        public IQueryable<fnAffiliateClient> fn_AffiliateClient(long? FromDate, long? ToDate, int? PartnerId)
        {
            return FromExpression(() => fn_AffiliateClient(FromDate, ToDate, PartnerId));
        }

        [DbFunction("fn_Agent", "dbo")]
        public IQueryable<fnAgent> fn_Agent(int? AgentId)
        {
            return FromExpression(() => fn_Agent(AgentId));
        }

        [DbFunction("fn_AgentProfit", "dbo")]
        public IQueryable<fnAgentProfit> fn_AgentProfit(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_AgentProfit(FromDate, ToDate));
        }

        [DbFunction("fn_AgentProfitReport", "dbo")]
        public IQueryable<fnAgentProfitReport> fn_AgentProfitReport(long? FromDate, long? ToDate, int? AgentId)
        {
            return FromExpression(() => fn_AgentProfitReport(FromDate, ToDate, AgentId));
        }

        [DbFunction("fn_AgentTransaction", "dbo")]
        public IQueryable<fnAgentTransaction> fn_AgentTransaction(long? FromDate, long? ToDate, int? AgentId)
        {
            return FromExpression(() => fn_AgentTransaction(FromDate, ToDate, AgentId));
        }

        [DbFunction("fn_AgentTurnoverProfit", "dbo")]
        public IQueryable<fnAgentTurnoverProfit> fn_AgentTurnoverProfit(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_AgentTurnoverProfit(FromDate, ToDate));
        }

        [DbFunction("fn_Announcement", "dbo")]
        public IQueryable<fnAnnouncement> fn_Announcement(string languageId)
        {
            return FromExpression(() => fn_Announcement(languageId));
        }

        [DbFunction("fn_Banner", "dbo")]
        public IQueryable<fnBanner> fn_Banner(string languageId)
        {
            return FromExpression(() => fn_Banner(languageId));
        }

        [DbFunction("fn_BetShopBet", "dbo")]
        public IQueryable<fnBetShopBet> fn_BetShopBet()
        {
            return FromExpression(() => fn_BetShopBet());
        }

        [DbFunction("fn_BetShopBetForDashboard", "dbo")]
        public IQueryable<fnBetShopBetForDashboard> fn_BetShopBetForDashboard(long? FromDate, long? ToDate, int? PartnerId)
        {
            return FromExpression(() => fn_BetShopBetForDashboard(FromDate, ToDate, PartnerId));
        }

        [DbFunction("fn_BetShopReconing", "dbo")]
        public IQueryable<fnBetShopReconing> fn_BetShopReconing()
        {
            return FromExpression(() => fn_BetShopReconing());
        }

        [DbFunction("fn_BetShops", "dbo")]
        public IQueryable<fnBetShops> fn_BetShops()
        {
            return FromExpression(() => fn_BetShops());
        }

        [DbFunction("fn_Bonus", "dbo")]
        public IQueryable<fnBonus> fn_Bonus(string languageId)
        {
            return FromExpression(() => fn_Bonus(languageId));
        }

        [DbFunction("fn_CashDesks", "dbo")]
        public IQueryable<fnCashDesks> fn_CashDesks()
        {
            return FromExpression(() => fn_CashDesks());
        }

        [DbFunction("fn_CashDeskTransaction", "dbo")]
        public IQueryable<fnCashDeskTransaction> fn_CashDeskTransaction(string languageId)
        {
            return FromExpression(() => fn_CashDeskTransaction(languageId));
        }

        [DbFunction("fn_Client", "dbo")]
        public IQueryable<fnClient> fn_Client()
        {
            return FromExpression(() => fn_Client());
        }

        [DbFunction("fn_ClientBonus", "dbo")]
        public IQueryable<fnClientBonus> fn_ClientBonus(string languageId)
        {
            return FromExpression(() => fn_ClientBonus(languageId));
        }

        [DbFunction("fn_ClientIdentity", "dbo")]
        public IQueryable<fnClientIdentity> fn_ClientIdentity()
        {
            return FromExpression(() => fn_ClientIdentity());
        }

        [DbFunction("fn_ClientInfo", "dbo")]
        public IQueryable<fnClientInfo> fn_ClientInfo(DateTime? LastClosedPeriodDate)
        {
            return FromExpression(() => fn_ClientInfo(LastClosedPeriodDate));
        }

        [DbFunction("fn_ClientInfoForDashboard", "dbo")]
        public IQueryable<fnClientInfoForDashboard> fn_ClientInfoForDashboard(long? FromDate, long? ToDate, int? PartnerId)
        {
            return FromExpression(() => fn_ClientInfoForDashboard(FromDate, ToDate, PartnerId));
        }

        [DbFunction("fn_ClientLog", "dbo")]
        public IQueryable<fnClientLog> fn_ClientLog()
        {
            return FromExpression(() => fn_ClientLog());
        }

        [DbFunction("fn_ClientMessage", "dbo")]
        public IQueryable<fnClientMessage> fn_ClientMessage()
        {
            return FromExpression(() => fn_ClientMessage());
        }

        [DbFunction("fn_ClientReport", "dbo")]
        public IQueryable<fnClientReport> fn_ClientReport(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ClientReport(FromDate, ToDate));
        }

        [DbFunction("fn_ClientSession", "dbo")]
        public IQueryable<fnClientSession> fn_ClientSession()
        {
            return FromExpression(() => fn_ClientSession());
        }

        [DbFunction("fn_ClientProductCommission", "dbo")]
        public IQueryable<fnClientProductCommission> fn_ClientProductCommission(int ProductId, int ClientId)
        {
            return FromExpression(() => fn_ClientProductCommission(ProductId, ClientId));
        }

        [DbFunction("fn_CommentTemplate", "dbo")]
        public IQueryable<fnCommentTemplate> fn_CommentTemplate(string LanguageId)
        {
            return FromExpression(() => fn_CommentTemplate(LanguageId));
        }

        [DbFunction("fn_ConvertCurrency", "dbo")]
        public IQueryable<fnConvertCurrency> fn_ConvertCurrency(string fromCurrency, string toCurrency, decimal? amount)
        {
            return FromExpression(() => fn_ConvertCurrency(fromCurrency, toCurrency, amount));
        }

        [DbFunction("fn_Correction", "dbo")]
        public IQueryable<fnCorrection> fn_Correction(bool? isClient)
        {
            return FromExpression(() => fn_Correction(isClient));
        }

        [DbFunction("fn_Enumeration", "dbo")]
        public IQueryable<fnEnumeration> fn_Enumeration()
        {
            return FromExpression(() => fn_Enumeration());
        }

        [DbFunction("fn_ErrorType", "dbo")]
        public IQueryable<fnErrorType> fn_ErrorType(string languageId)
        {
            return FromExpression(() => fn_ErrorType(languageId));
        }

        [DbFunction("fn_FirstTimePaymentRequest", "dbo")]
        public IQueryable<fnFirstTimePaymentRequest> fn_FirstTimePaymentRequest(string Currency, bool? ConvertAmounts)
        {
            return FromExpression(() => fn_FirstTimePaymentRequest(Currency, ConvertAmounts));
        }

        [DbFunction("fn_GetChildProductsByProductId", "dbo")]
        public IQueryable<fnGetChildProductsByProductId> fn_GetChildProductsByProductId(int? productId)
        {
            return FromExpression(() => fn_GetChildProductsByProductId(productId));
        }

        [DbFunction("fn_GetOrderedAccountIds", "dbo")]
        public IQueryable<fnGetOrderedAccountIds> fn_GetOrderedAccountIds(long? ObjectId, int? ObjectTypeId, string CurrencyId, int? OperationTypeId)
        {
            return FromExpression(() => fn_GetOrderedAccountIds(ObjectId, ObjectTypeId, CurrencyId, OperationTypeId));
        }

        [DbFunction("fn_InternetBet", "dbo")]
        public IQueryable<fnInternetBet> fn_InternetBet()
        {
            return FromExpression(() => fn_InternetBet());
        }

        [DbFunction("fn_InternetBetByClient", "dbo")]
        public IQueryable<fnInternetBetByClient> fn_InternetBetByClient()
        {
            return FromExpression(() => fn_InternetBetByClient());
        }

        [DbFunction("fn_InternetBetForDashboard", "dbo")]
        public IQueryable<fnInternetBetForDashboard> fn_InternetBetForDashboard(long? FromDate, long? ToDate, int? PartnerId)
        {
            return FromExpression(() => fn_InternetBetForDashboard(FromDate, ToDate, PartnerId));
        }

        [DbFunction("fn_InternetGame", "dbo")]
        public IQueryable<fnInternetGame> fn_InternetGame(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_InternetGame(FromDate, ToDate));
        }

        [DbFunction("fn_JobArea", "dbo")]
        public IQueryable<fnJobArea> fn_JobArea(string LanguageId)
        {
            return FromExpression(() => fn_JobArea(LanguageId));
        }

        [DbFunction("fn_MessageTemplate", "dbo")]
        public IQueryable<fnMessageTemplate> fn_MessageTemplate(string LanguageId)
        {
            return FromExpression(() => fn_MessageTemplate(LanguageId));
        }

        [DbFunction("fn_Note", "dbo")]
        public IQueryable<fnNote> fn_Note()
        {
            return FromExpression(() => fn_Note());
        }

        [DbFunction("fn_ObjectTranslationEntry", "dbo")]
        public IQueryable<fnObjectTranslationEntry> fn_ObjectTranslationEntry(int? ObjectTypeId, string SearchText, string LanguageId)
        {
            return FromExpression(() => fn_ObjectTranslationEntry(ObjectTypeId, SearchText, LanguageId));
        }

        [DbFunction("fn_OnlineClient", "dbo")]
        public IQueryable<fnOnlineClient> fn_OnlineClient(string Currency)
        {
            return FromExpression(() => fn_OnlineClient(Currency));
        }

        [DbFunction("fn_OnlineUser", "dbo")]
        public IQueryable<fnOnlineUser> fn_OnlineUser(int? AgentId)
        {
            return FromExpression(() => fn_OnlineUser(AgentId));
        }

        [DbFunction("fn_OperationType", "dbo")]
        public IQueryable<fnOperationType> fn_OperationType(string languageId)
        {
            return FromExpression(() => fn_OperationType(languageId));
        }

        [DbFunction("fn_PartnerBankInfo", "dbo")]
        public IQueryable<fnPartnerBankInfo> fn_PartnerBankInfo(string languageId)
        {
            return FromExpression(() => fn_PartnerBankInfo(languageId));
        }

        [DbFunction("fn_PartnerPaymentSetting", "dbo")]
        public IQueryable<fnPartnerPaymentSetting> fn_PartnerPaymentSetting(string LanguageId)
        {
            return FromExpression(() => fn_PartnerPaymentSetting(LanguageId));
        }

        [DbFunction("fn_PartnerProductSetting", "dbo")]
        public IQueryable<fnPartnerProductSetting> fn_PartnerProductSetting(string LanguageId)
        {
            return FromExpression(() => fn_PartnerProductSetting(LanguageId));
        }

        [DbFunction("fn_PaymentRequest", "dbo")]
        public IQueryable<fnPaymentRequest> fn_PaymentRequest()
        {
            return FromExpression(() => fn_PaymentRequest());
        }

        [DbFunction("fn_Product", "dbo")]
        public IQueryable<fnProduct> fn_Product(string LanguageId)
        {
            return FromExpression(() => fn_Product(LanguageId));
        }

        [DbFunction("fn_ProductCategory", "dbo")]
        public IQueryable<fnProductCategory> fn_ProductCategory(string languageId)
        {
            return FromExpression(() => fn_ProductCategory(languageId));
        }

        [DbFunction("fn_ProductCommission", "dbo")]
        public IQueryable<fnProductCommission> fn_ProductCommission(int? productId, int? agentId)
        {
            return FromExpression(() => fn_ProductCommission(productId, agentId));
        }

        [DbFunction("fn_ProductGroup", "dbo")]
        public IQueryable<fnProductGroup> fn_ProductGroup(int? productId)
        {
            return FromExpression(() => fn_ProductGroup(productId));
        }
 
        [DbFunction("fn_ProfitByAgent", "dbo")]
        public IQueryable<fnProfitByAgent> fn_ProfitByAgent(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ProfitByAgent(FromDate, ToDate));
        }

        [DbFunction("fn_ProfitByClientProduct", "dbo")]
        public IQueryable<fnProfitByClientProduct> fn_ProfitByClientProduct(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ProfitByClientProduct(FromDate, ToDate));
        }

        [DbFunction("fn_Promotion", "dbo")]
        public IQueryable<fnPromotion> fn_Promotion(string languageId)
        {
            return FromExpression(() => fn_Promotion(languageId));
        }

        [DbFunction("fn_RealTimeInfo", "dbo")]
        public IQueryable<fnRealTimeInfo> fn_RealTimeInfo(string Currency)
        {
            return FromExpression(() => fn_RealTimeInfo(Currency));
        }

        [DbFunction("fn_Region", "dbo")]
        public IQueryable<fnRegion> fn_Region(string LanguageId)
        {
            return FromExpression(() => fn_Region(LanguageId));
        }

        [DbFunction("fn_RegionPath", "dbo")]
        public IQueryable<fnRegionPath> fn_RegionPath(int? regionId)
        {
            return FromExpression(() => fn_RegionPath(regionId));
        }

        [DbFunction("fn_ReportByAgentTransfer", "dbo")]
        public IQueryable<fnReportByAgentTransfer> fn_ReportByAgentTransfer(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ReportByAgentTransfer(FromDate, ToDate));
        }

        [DbFunction("fn_ReportByUserTransaction", "dbo")]
        public IQueryable<fnReportByUserTransaction> fn_ReportByUserTransaction(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ReportByUserTransaction(FromDate, ToDate));
        }

        [DbFunction("fn_ReportByBetShopOperation", "dbo")]
        public IQueryable<fnReportByBetShopOperation> fn_ReportByBetShopOperation(DateTime? FromDate, DateTime? ToDate)
        {
            return FromExpression(() => fn_ReportByBetShopOperation(FromDate, ToDate));
        }

        [DbFunction("fn_ReportByClientExclusion", "dbo")]
        public IQueryable<fnReportByClientExclusion> fn_ReportByClientExclusion()
        {
            return FromExpression(() => fn_ReportByClientExclusion());
        }

        [DbFunction("fn_ReportByPartner", "dbo")]
        public IQueryable<fnReportByPartner> fn_ReportByPartner(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ReportByPartner(FromDate, ToDate));
        }

        [DbFunction("fn_ReportByPaymentSystem", "dbo")]
        public IQueryable<fnReportByPaymentSystem> fn_ReportByPaymentSystem(long? FromDate, long? ToDate, int? Type)
        {
            return FromExpression(() => fn_ReportByPaymentSystem(FromDate, ToDate, Type));
        }

        [DbFunction("fn_ReportByProduct", "dbo")]
        public IQueryable<fnReportByProduct> fn_ReportByProduct(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ReportByProduct(FromDate, ToDate));
        }

        [DbFunction("fn_ReportByProvider", "dbo")]
        public IQueryable<fnReportByProvider> fn_ReportByProvider(long? FromDate, long? ToDate)
        {
            return FromExpression(() => fn_ReportByProvider(FromDate, ToDate));
        }

        [DbFunction("fn_SecurityQuestion", "dbo")]
        public IQueryable<fnSecurityQuestion> fn_SecurityQuestion(string LanguageId)
        {
            return FromExpression(() => fn_SecurityQuestion(LanguageId));
        }

        [DbFunction("fn_SegmentClient", "dbo")]
        public IQueryable<fnSegmentClient> fn_SegmentClient()
        {
            return FromExpression(() => fn_SegmentClient());
        }

        [DbFunction("fn_ShiftReport", "dbo")]
        public IQueryable<fnShiftReport> fn_ShiftReport(DateTime? FromDate, DateTime? ToDate, int? CashDeskId, int? CashierId)
        {
            return FromExpression(() => fn_ShiftReport(FromDate, ToDate, CashDeskId, CashierId));
        }

        [DbFunction("fn_Ticket", "dbo")]
        public IQueryable<fnTicket> fn_Ticket()
        {
            return FromExpression(() => fn_Ticket());
        }

        [DbFunction("fn_Transaction", "dbo")]
        public IQueryable<fnTransaction> fn_Transaction(string languageId)
        {
            return FromExpression(() => fn_Transaction(languageId));
        }

        [DbFunction("fn_Translation", "dbo")]
        public IQueryable<fnTranslation> fn_Translation(string languageId)
        {
            return FromExpression(() => fn_Translation(languageId));
        }

        [DbFunction("fn_TranslationEntry", "dbo")]
        public IQueryable<fnTranslationEntry> fn_TranslationEntry()
        {
            return FromExpression(() => fn_TranslationEntry());
        }

        [DbFunction("fn_User", "dbo")]
        public IQueryable<fnUser> fn_User()
        {
            return FromExpression(() => fn_User());
        }

        [DbFunction("fn_UserCorrection", "dbo")]
        public IQueryable<fnUserCorrection> fn_UserCorrection()
        {
            return FromExpression(() => fn_UserCorrection());
        }

        [DbFunction("fn_UserLog", "dbo")]
        public IQueryable<fnUserLog> fn_UserLog()
        {
            return FromExpression(() => fn_UserLog());
        }

        [DbFunction("fn_UserPermission", "dbo")]
        public IQueryable<fnUserPermission> fn_UserPermission()
        {
            return FromExpression(() => fn_UserPermission());
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<fnAccount>().HasNoKey();
            modelBuilder.Entity<fnAccountType>().HasNoKey();
            modelBuilder.Entity<fnActionLog>().HasNoKey();
            modelBuilder.Entity<fnAdminShiftReport>().HasNoKey();
            modelBuilder.Entity<fnAffiliateClient>().HasNoKey();
            modelBuilder.Entity<fnAgent>().HasNoKey();
            modelBuilder.Entity<fnAgentProfit>().HasNoKey();
            modelBuilder.Entity<fnAgentProfitReport>().HasNoKey();
            modelBuilder.Entity<fnAgentTransaction>().HasNoKey();
            modelBuilder.Entity<fnAgentTurnoverProfit>().HasNoKey();
            modelBuilder.Entity<fnAnnouncement>().HasNoKey();
            modelBuilder.Entity<fnBanner>().HasNoKey();
            modelBuilder.Entity<fnBetShopBet>().HasNoKey();
            modelBuilder.Entity<fnBetShopBetForDashboard>().HasNoKey();
            modelBuilder.Entity<fnBetShopReconing>().HasNoKey();
            modelBuilder.Entity<fnBetShops>().HasNoKey();
            modelBuilder.Entity<fnBonus>().HasNoKey();
            modelBuilder.Entity<fnCashDesks>().HasNoKey();
            modelBuilder.Entity<fnCashDeskTransaction>().HasNoKey();
            modelBuilder.Entity<fnClient>().HasNoKey();
            modelBuilder.Entity<fnClientBonus>().HasNoKey();
            modelBuilder.Entity<fnClientIdentity>().HasNoKey();
            modelBuilder.Entity<fnClientInfo>().HasNoKey();
            modelBuilder.Entity<fnClientInfoForDashboard>().HasNoKey();
            modelBuilder.Entity<fnClientLog>().HasNoKey();
            modelBuilder.Entity<fnClientMessage>().HasNoKey();
            modelBuilder.Entity<fnClientProductCommission>().HasNoKey();
            modelBuilder.Entity<fnClientReport>().HasNoKey();
            modelBuilder.Entity<fnClientSession>().HasNoKey();
            modelBuilder.Entity<fnCommentTemplate>().HasNoKey();
            modelBuilder.Entity<fnConvertCurrency>().HasNoKey();
            modelBuilder.Entity<fnCorrection>().HasNoKey();
            modelBuilder.Entity<fnEnumeration>().HasNoKey();
            modelBuilder.Entity<fnErrorType>().HasNoKey();
            modelBuilder.Entity<fnFirstTimePaymentRequest>().HasNoKey();
            modelBuilder.Entity<fnGetChildProductsByProductId>().HasNoKey();
            modelBuilder.Entity<fnGetOrderedAccountIds>().HasNoKey();
            modelBuilder.Entity<fnInternetBet>().HasNoKey();
            modelBuilder.Entity<fnInternetBetByClient>().HasNoKey();
            modelBuilder.Entity<fnInternetBetForDashboard>().HasNoKey();
            modelBuilder.Entity<fnInternetGame>().HasNoKey();
            modelBuilder.Entity<fnJobArea>().HasNoKey();
            modelBuilder.Entity<fnMessageTemplate>().HasNoKey();
            modelBuilder.Entity<fnNote>().HasNoKey();
            modelBuilder.Entity<fnObjectTranslationEntry>().HasNoKey();
            modelBuilder.Entity<fnOnlineClient>().HasNoKey();
            modelBuilder.Entity<fnOnlineUser>().HasNoKey();
            modelBuilder.Entity<fnOperationType>().HasNoKey();
            modelBuilder.Entity<fnPartnerBankInfo>().HasNoKey();
            modelBuilder.Entity<fnPartnerPaymentSetting>().HasNoKey();
            modelBuilder.Entity<fnPartnerProductSetting>().HasNoKey();
            modelBuilder.Entity<fnPaymentRequest>().HasNoKey();
            modelBuilder.Entity<fnProduct>().HasNoKey();
            modelBuilder.Entity<fnProductCategory>().HasNoKey();
            modelBuilder.Entity<fnProductCommission>().HasNoKey();
            modelBuilder.Entity<fnProductGroup>().HasNoKey();
            modelBuilder.Entity<fnProfitByAgent>().HasNoKey();
            modelBuilder.Entity<fnProfitByClientProduct>().HasNoKey();
            modelBuilder.Entity<fnPromotion>().HasNoKey();
            modelBuilder.Entity<fnRealTimeInfo>().HasNoKey();
            modelBuilder.Entity<fnRegion>().HasNoKey();
            modelBuilder.Entity<fnRegionPath>().HasNoKey();
            modelBuilder.Entity<fnReportByAgentTransfer>().HasNoKey();
            modelBuilder.Entity<fnReportByUserTransaction>().HasNoKey();
            modelBuilder.Entity<fnReportByBetShopOperation>().HasNoKey();
            modelBuilder.Entity<fnReportByClientExclusion>().HasNoKey();
            modelBuilder.Entity<fnReportByPartner>().HasNoKey();
            modelBuilder.Entity<fnReportByPaymentSystem>().HasNoKey();
            modelBuilder.Entity<fnReportByProduct>().HasNoKey();
            modelBuilder.Entity<fnReportByProvider>().HasNoKey();
            modelBuilder.Entity<fnSecurityQuestion>().HasNoKey();
            modelBuilder.Entity<fnSegmentClient>().HasNoKey();
            modelBuilder.Entity<fnShiftReport>().HasNoKey();
            modelBuilder.Entity<fnTicket>().HasNoKey();
            modelBuilder.Entity<fnTransaction>().HasNoKey();
            modelBuilder.Entity<fnTranslation>().HasNoKey();
            modelBuilder.Entity<fnTranslationEntry>().HasNoKey();
            modelBuilder.Entity<fnUser>().HasNoKey();
            modelBuilder.Entity<fnUserCorrection>().HasNoKey();
            modelBuilder.Entity<fnUserLog>().HasNoKey();
            modelBuilder.Entity<fnUserPermission>().HasNoKey();
        }
    }
}
