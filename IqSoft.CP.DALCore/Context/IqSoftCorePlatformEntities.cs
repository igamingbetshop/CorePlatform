// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;

#nullable disable

namespace IqSoft.CP.DAL
{
    public partial class IqSoftCorePlatformEntities : DbContext
    {
        private static readonly string ConfigurationString;
        static IqSoftCorePlatformEntities()
        {
            var fl = string.Format(@"{0}\appsettings.json", Directory.GetCurrentDirectory());
            IConfigurationBuilder builder;
            if (File.Exists(fl))
                builder = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
            else
            {
                var executablePath = Process.GetCurrentProcess().MainModule.FileName;
                builder = new ConfigurationBuilder().SetBasePath(Path.GetDirectoryName(executablePath)).AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);
            }
            var configurationRoot = builder.Build();
            ConfigurationString = configurationRoot.GetSection("ConnectionStrings").GetSection("IqSoftCorePlatformEntities").Value;
        }
        public override void Dispose()
        {
            base.Dispose();
        }

        public IqSoftCorePlatformEntities() : base()
        {

        }

        public IqSoftCorePlatformEntities(DbContextOptions<IqSoftCorePlatformEntities> options)
            : base(options)
        {
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(ConfigurationString);
            }
        }

        public virtual DbSet<AccessObject> AccessObjects { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountBalance> AccountBalances { get; set; }
        public virtual DbSet<AccountClosedPeriod> AccountClosedPeriods { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<AccountTypeKind> AccountTypeKinds { get; set; }
        public virtual DbSet<AccountTypePriority> AccountTypePriorities { get; set; }
        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<ActionLog> ActionLogs { get; set; }
        public virtual DbSet<AffiliatePlatform> AffiliatePlatforms { get; set; }
        public virtual DbSet<AffiliateReferral> AffiliateReferrals { get; set; }
        public virtual DbSet<AgentCommission> AgentCommissions { get; set; }
        public virtual DbSet<AgentProfit> AgentProfits { get; set; }
        public virtual DbSet<Announcement> Announcements { get; set; }
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<BannerSegmentSetting> BannerSegmentSettings { get; set; }
        public virtual DbSet<Bet> Bets { get; set; }
        public virtual DbSet<BetShop> BetShops { get; set; }
        public virtual DbSet<BetShopGroup> BetShopGroups { get; set; }
        public virtual DbSet<BetShopReconing> BetShopReconings { get; set; }
        public virtual DbSet<BetShopTicket> BetShopTickets { get; set; }
        public virtual DbSet<Bonu> Bonus { get; set; }
        public virtual DbSet<BonusCountrySetting> BonusCountrySettings { get; set; }
        public virtual DbSet<BonusCurrencySetting> BonusCurrencySettings { get; set; }
        public virtual DbSet<BonusLanguageSetting> BonusLanguageSettings { get; set; }
        public virtual DbSet<BonusPaymentSystemSetting> BonusPaymentSystemSettings { get; set; }
        public virtual DbSet<BonusProduct> BonusProducts { get; set; }
        public virtual DbSet<BonusSegmentSetting> BonusSegmentSettings { get; set; }
        public virtual DbSet<CRMSetting> CRMSettings { get; set; }
        public virtual DbSet<CashDesk> CashDesks { get; set; }
        public virtual DbSet<CashDeskShift> CashDeskShifts { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientBankInfo> ClientBankInfoes { get; set; }
        public virtual DbSet<ClientBonu> ClientBonus { get; set; }
        public virtual DbSet<ClientBonusTrigger> ClientBonusTriggers { get; set; }
        public virtual DbSet<ClientCategory> ClientCategories { get; set; }
        public virtual DbSet<ClientClassification> ClientClassifications { get; set; }
        public virtual DbSet<ClientClosedPeriod> ClientClosedPeriods { get; set; }
        public virtual DbSet<ClientFavoriteProduct> ClientFavoriteProducts { get; set; }
        public virtual DbSet<ClientIdentity> ClientIdentities { get; set; }
        public virtual DbSet<ClientInfo> ClientInfoes { get; set; }
        public virtual DbSet<ClientLog> ClientLogs { get; set; }
        public virtual DbSet<ClientMessage> ClientMessages { get; set; }
        public virtual DbSet<ClientMessageState> ClientMessageStates { get; set; }
        public virtual DbSet<ClientPaymentInfo> ClientPaymentInfoes { get; set; }
        public virtual DbSet<ClientPaymentSetting> ClientPaymentSettings { get; set; }
        public virtual DbSet<ClientSecurityAnswer> ClientSecurityAnswers { get; set; }
        public virtual DbSet<ClientSession> ClientSessions { get; set; }
        public virtual DbSet<ClientSetting> ClientSettings { get; set; }
        public virtual DbSet<CommentTemplate> CommentTemplates { get; set; }
        public virtual DbSet<ComplimentaryPointRate> ComplimentaryPointRates { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<Enumeration> Enumerations { get; set; }
        public virtual DbSet<ErrorType> ErrorTypes { get; set; }
        public virtual DbSet<GameProvider> GameProviders { get; set; }
        public virtual DbSet<GameProviderSetting> GameProviderSettings { get; set; }
        public virtual DbSet<Jackpot> Jackpots { get; set; }
        public virtual DbSet<JackpotSetting> JackpotSettings { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobArea> JobAreas { get; set; }
        public virtual DbSet<JobResult> JobResults { get; set; }
        public virtual DbSet<JobTrigger> JobTriggers { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LimitType> LimitTypes { get; set; }
        public virtual DbSet<Merchant> Merchants { get; set; }
        public virtual DbSet<MerchantRequest> MerchantRequests { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<NotificationService> NotificationServices { get; set; }
        public virtual DbSet<ObjectAction> ObjectActions { get; set; }
        public virtual DbSet<ObjectChangeHistory> ObjectChangeHistories { get; set; }
        public virtual DbSet<ObjectCurrencyPriority> ObjectCurrencyPriorities { get; set; }
        public virtual DbSet<ObjectDataChangeHistory> ObjectDataChangeHistories { get; set; }
        public virtual DbSet<ObjectType> ObjectTypes { get; set; }
        public virtual DbSet<OperationType> OperationTypes { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<PartnerBankInfo> PartnerBankInfoes { get; set; }
        public virtual DbSet<PartnerCountrySetting> PartnerCountrySettings { get; set; }
        public virtual DbSet<PartnerCurrencySetting> PartnerCurrencySettings { get; set; }
        public virtual DbSet<PartnerKey> PartnerKeys { get; set; }
        public virtual DbSet<PartnerLanguageSetting> PartnerLanguageSettings { get; set; }
        public virtual DbSet<PartnerPaymentCountrySetting> PartnerPaymentCountrySettings { get; set; }
        public virtual DbSet<PartnerPaymentCurrencyRate> PartnerPaymentCurrencyRates { get; set; }
        public virtual DbSet<PartnerPaymentSetting> PartnerPaymentSettings { get; set; }
        public virtual DbSet<PartnerProductSetting> PartnerProductSettings { get; set; }
        public virtual DbSet<ProductCountrySetting> ProductCountrySettings { get; set; }
        public virtual DbSet<PaymentLimit> PaymentLimits { get; set; }
        public virtual DbSet<PaymentRequest> PaymentRequests { get; set; }
        public virtual DbSet<PaymentRequestHistory> PaymentRequestHistories { get; set; }
        public virtual DbSet<PaymentRequestTransfer> PaymentRequestTransfers { get; set; }
        public virtual DbSet<PaymentSystem> PaymentSystems { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PermissionGroup> PermissionGroups { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductLimit> ProductLimits { get; set; }
        public virtual DbSet<PromoCode> PromoCodes { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<PromotionSegmentSetting> PromotionSegmentSettings { get; set; }
        public virtual DbSet<PromotionLanguageSetting> PromotionLanguageSettings { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<SecurityQuestion> SecurityQuestions { get; set; }
        public virtual DbSet<Segment> Segments { get; set; }
        public virtual DbSet<SegmentSetting> SegmentSettings { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TicketMessage> TicketMessages { get; set; }
        public virtual DbSet<TicketMessageState> TicketMessageStates { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Translation> Translations { get; set; }
        public virtual DbSet<TranslationEntry> TranslationEntries { get; set; }
        public virtual DbSet<TriggerGroup> TriggerGroups { get; set; }
        public virtual DbSet<TriggerGroupSetting> TriggerGroupSettings { get; set; }
        public virtual DbSet<TriggerProductSetting> TriggerProductSettings { get; set; }
        public virtual DbSet<TriggerSetting> TriggerSettings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserSession> UserSessions { get; set; }
        public virtual DbSet<UserSetting> UserSettings { get; set; }
        public virtual DbSet<WebSiteMenu> WebSiteMenus { get; set; }
        public virtual DbSet<WebSiteMenuItem> WebSiteMenuItems { get; set; }
        public virtual DbSet<WebSiteSubMenuItem> WebSiteSubMenuItems { get; set; }
        public virtual DbSet<Affiliate> Affiliates { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccessObject>(entity =>
            {
                entity.ToTable("AccessObject");

                entity.Property(e => e.PermissionId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.AccessObjects)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("FK_AccessObject_Permission");
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.ToTable("Account");

                entity.HasIndex(e => new { e.ObjectId, e.ObjectTypeId, e.TypeId, e.CurrencyId }, "IX_Account")
                    .IsUnique();

                entity.HasIndex(e => new { e.ObjectId, e.ObjectTypeId }, "IX_Account_1");

                entity.Property(e => e.Balance).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_Currency");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_ObjectType");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Account_AccountType");
            });

            modelBuilder.Entity<AccountBalance>(entity =>
            {
                entity.ToTable("AccountBalance");

                entity.HasIndex(e => new { e.AccountId, e.Date }, "IX_AccountBalance")
                    .IsUnique();

                entity.Property(e => e.Balance).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Date).HasPrecision(3);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountBalances)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountBalance_Account");
            });

            modelBuilder.Entity<AccountClosedPeriod>(entity =>
            {
                entity.ToTable("AccountClosedPeriod");

                entity.HasIndex(e => new { e.AccountId, e.Date }, "IX_AccountClosedPeriod");

                entity.Property(e => e.Date).HasPrecision(3);

                entity.Property(e => e.FirstBalance).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LastBalance).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalCreditAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalDebitAmount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountClosedPeriods)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClosePeriod_Account");
            });

            modelBuilder.Entity<AccountType>(entity =>
            {
                entity.ToTable("AccountType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AccountTypeKind>(entity =>
            {
                entity.ToTable("AccountTypeKind");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AccountTypePriority>(entity =>
            {
                entity.ToTable("AccountTypePriority");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.AccountType)
                    .WithMany(p => p.AccountTypePriorities)
                    .HasForeignKey(d => d.AccountTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountTypePriority_AccountType");

                entity.HasOne(d => d.OperationType)
                    .WithMany(p => p.AccountTypePriorities)
                    .HasForeignKey(d => d.OperationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccountTypePriority_OperationType");
            });

            modelBuilder.Entity<Action>(entity =>
            {
                entity.ToTable("Action");

                entity.HasIndex(e => e.NickName, "IX_Action")
                    .IsUnique();

                entity.Property(e => e.Group).HasDefaultValueSql("((1))");

                entity.Property(e => e.NickName)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.Actions)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Action_Translation");
            });

            modelBuilder.Entity<ActionLog>(entity =>
            {
                entity.ToTable("ActionLog");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Domain)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Info).HasMaxLength(1000);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Language)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Page)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ActionLogs)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_ActionLog_UserSession");
            });

            modelBuilder.Entity<AffiliatePlatform>(entity =>
            {
                entity.ToTable("AffiliatePlatform");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.AffiliatePlatforms)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AffiliatePlatform_Partner");
            });

            modelBuilder.Entity<AffiliateReferral>(entity =>
            {
                entity.ToTable("AffiliateReferral");

                entity.HasIndex(e => new { e.AffiliatePlatformId, e.AffiliateId, e.RefId }, "IX_AffiliateReferal")
                    .IsUnique();

                entity.Property(e => e.AffiliateId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastProcessedBonusTime).HasColumnType("datetime");

                entity.Property(e => e.RefId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.AffiliatePlatform)
                    .WithMany(p => p.AffiliateReferrals)
                    .HasForeignKey(d => d.AffiliatePlatformId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AffiliateReferal_AffiliatePlatform");
            });

            modelBuilder.Entity<AgentCommission>(entity =>
            {
                entity.ToTable("AgentCommission");

                entity.HasIndex(e => new { e.AgentId, e.ProductId }, "IX_AgentCommission");

                entity.Property(e => e.Percent).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.TurnoverPercent).IsUnicode(false);

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.AgentCommissions)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("FK_AgentCommission_User");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.AgentCommissions)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_AgentCommission_Client");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.AgentCommissions)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgentCommission_Product");
            });

            modelBuilder.Entity<AgentProfit>(entity =>
            {
                entity.ToTable("AgentProfit");

                entity.Property(e => e.CalculationStartingTime).HasPrecision(3);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.GGR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Profit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalBetAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalWinAmount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.AgentProfitAgents)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgentProfit_User");

                entity.HasOne(d => d.FromAgent)
                    .WithMany(p => p.AgentProfitFromAgents)
                    .HasForeignKey(d => d.FromAgentId)
                    .HasConstraintName("FK_AgentProfit_User1");

                entity.HasOne(d => d.ProductGroup)
                    .WithMany(p => p.AgentProfitProductGroups)
                    .HasForeignKey(d => d.ProductGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgentProfit_Product");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.AgentProfitProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AgentProfit_Product1");
            });

            modelBuilder.Entity<Announcement>(entity =>
            {
                entity.ToTable("Announcement");

                entity.HasIndex(e => e.Date, "IX_Announcement");

                entity.HasIndex(e => e.Type, "IX_Announcement_1");

                entity.Property(e => e.CreationDate).HasPrecision(3);

                entity.Property(e => e.LastUpdateDate).HasPrecision(3);

                entity.Property(e => e.NickName).IsRequired();

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Announcements)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Announcement_Partner");

                entity.HasOne(d => d.ReceiverType)
                    .WithMany(p => p.Announcements)
                    .HasForeignKey(d => d.ReceiverTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Announcement_ObjectType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Announcements)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Announcement_User");
            });

            modelBuilder.Entity<Banner>(entity =>
            {
                entity.ToTable("Banner");

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.EndDate).HasPrecision(3);

                entity.Property(e => e.Head)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Link)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasPrecision(3);

                entity.HasOne(d => d.BodyTranslation)
                    .WithMany(p => p.BannerBodyTranslations)
                    .HasForeignKey(d => d.BodyTranslationId)
                    .HasConstraintName("FK_Banner_BodyTranslation");

                entity.HasOne(d => d.HeadTranslation)
                    .WithMany(p => p.BannerHeadTranslations)
                    .HasForeignKey(d => d.HeadTranslationId)
                    .HasConstraintName("FK_Banner_HeadTranslation");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Banners)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Banner_Partner");
            });

            modelBuilder.Entity<BannerSegmentSetting>(entity =>
            {
                entity.ToTable("BannerSegmentSetting");

                entity.HasOne(d => d.Banner)
                    .WithMany(p => p.BannerSegmentSettings)
                    .HasForeignKey(d => d.BannerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BannerSegmentSetting_Banner");

                entity.HasOne(d => d.Segment)
                    .WithMany(p => p.BannerSegmentSettings)
                    .HasForeignKey(d => d.SegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BannerSegmentSetting_Segment");
            });

            modelBuilder.Entity<Bet>(entity =>
            {
                entity.ToTable("Bet");

                entity.HasIndex(e => e.BetDocumentId, "IX_Bet")
                    .IsUnique();

                entity.HasIndex(e => e.WinDocumentId, "IX_Bet_1");

                entity.HasIndex(e => e.State, "IX_Bet_10");

                entity.HasIndex(e => e.CurrencyId, "IX_Bet_11");

                entity.HasIndex(e => e.DeviceTypeId, "IX_Bet_12");

                entity.HasIndex(e => e.PayDocumentId, "IX_Bet_2");

                entity.HasIndex(e => e.BetDate, "IX_Bet_3");

                entity.HasIndex(e => e.UserId, "IX_Bet_4");

                entity.HasIndex(e => e.CashDeskId, "IX_Bet_5");

                entity.HasIndex(e => e.ClientId, "IX_Bet_6");

                entity.HasIndex(e => e.ProductId, "IX_Bet_7");

                entity.HasIndex(e => e.CalculationTime, "IX_Bet_8");

                entity.HasIndex(e => e.BonusId, "IX_Bet_9");

                entity.Property(e => e.BetAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BetTime).HasPrecision(3);

                entity.Property(e => e.CalculationTime).HasPrecision(3);

                entity.Property(e => e.Coefficient).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Rake).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.PayTime).HasPrecision(3);

                entity.Property(e => e.WinAmount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.CashDesk)
                    .WithMany(p => p.Bets)
                    .HasForeignKey(d => d.CashDeskId)
                    .HasConstraintName("FK_Bet_CashDesk");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Bets)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Bet_Client");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Bets)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bet_Currency");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Bets)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bet_Product");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Bets)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Bet_User");
            });

            modelBuilder.Entity<BetShop>(entity =>
            {
                entity.ToTable("BetShop");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.BonusPercent).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentLimit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DefaultLimit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Ips)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.BetShops)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShop_Currency");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.BetShops)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShop_BetShopGroup");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.BetShops)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShop_Partner");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.BetShops)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShop_UserSession");
            });

            modelBuilder.Entity<BetShopGroup>(entity =>
            {
                entity.ToTable("BetShopGroup");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_BetShopGroup_BetShopGroup");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.BetShopGroups)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShopGroup_Partner");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.BetShopGroups)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShopGroup_UserSession");
            });

            modelBuilder.Entity<BetShopReconing>(entity =>
            {
                entity.ToTable("BetShopReconing");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BetShopAvailiableBalance).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.BetShop)
                    .WithMany(p => p.BetShopReconings)
                    .HasForeignKey(d => d.BetShopId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShopReconing_BetShop");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.BetShopReconings)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShopReconing_Currency");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.BetShopReconings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShopReconing_User");
            });

            modelBuilder.Entity<BetShopTicket>(entity =>
            {
                entity.ToTable("BetShopTicket");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastPrintTime).HasPrecision(3);

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.BetShopTickets)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BetShopTicket_Product");
            });

            modelBuilder.Entity<Bonu>(entity =>
            {
                entity.Property(e => e.AutoApproveMaxAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Condition).IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.FinishTime).HasPrecision(3);

                entity.Property(e => e.Info)
                    .HasMaxLength(1500)
                    .IsUnicode(false);

                entity.Property(e => e.LastExecutionTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.MaxAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxGranted).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MinAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Percent).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.StartTime).HasPrecision(3);

                entity.Property(e => e.TotalGranted).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.AccountType)
                    .WithMany(p => p.Bonus)
                    .HasForeignKey(d => d.AccountTypeId)
                    .HasConstraintName("FK_Bonus_AccountType");

                entity.HasOne(d => d.LinkedBonus)
                    .WithMany(p => p.InverseLinkedBonus)
                    .HasForeignKey(d => d.LinkedBonusId)
                    .HasConstraintName("FK_Bonus_Bonus");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Bonus)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bonus_Partner");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.Bonus)
                    .HasForeignKey(d => d.TranslationId)
                    .HasConstraintName("FK_Bonus_Translation");
            });

            modelBuilder.Entity<BonusCountrySetting>(entity =>
            {
                entity.HasIndex(e => new { e.CountryId, e.BonusId }, "IX_CountryGroup_1");

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.BonusCountrySettings)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusCountrySettings_Bonus");
            });

            modelBuilder.Entity<BonusCurrencySetting>(entity =>
            {
                entity.HasIndex(e => new { e.BonusId, e.CurrencyId }, "IX_CurrencyGroup_UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.BonusCurrencySettings)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusCurrencySettings_Bonus");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.BonusCurrencySettings)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusCurrencySettings_Currency");
            });

            modelBuilder.Entity<BonusLanguageSetting>(entity =>
            {
                entity.HasIndex(e => new { e.BonusId, e.LanguageId }, "IX_LanguageGroup_UniqueIndex")
                    .IsUnique();

                entity.Property(e => e.LanguageId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.BonusLanguageSettings)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusLanguageSettings_Bonus");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.BonusLanguageSettings)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusLanguageSettings_Language");
            });

            modelBuilder.Entity<BonusPaymentSystemSetting>(entity =>
            {
                entity.ToTable("BonusPaymentSystemSetting");

                entity.HasIndex(e => e.BonusId, "IX_BonusPaymentSystemSetting");

                entity.HasIndex(e => new { e.BonusId, e.TriggerId, e.PaymentSystemId }, "IX_BonusPaymentSystemSetting_1")
                    .IsUnique();

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.BonusPaymentSystemSettings)
                    .HasForeignKey(d => d.BonusId)
                    .HasConstraintName("FK_BonusPaymentSystemSetting_Bonus");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.BonusPaymentSystemSettings)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusPaymentSystemSetting_PaymentSystem");

                entity.HasOne(d => d.Trigger)
                    .WithMany(p => p.BonusPaymentSystemSettings)
                    .HasForeignKey(d => d.TriggerId)
                    .HasConstraintName("FK_BonusPaymentSystemSetting_TriggerSetting");
            });

            modelBuilder.Entity<BonusProduct>(entity =>
            {
                entity.ToTable("BonusProduct");

                entity.HasIndex(e => new { e.BonusId, e.ProductId }, "IX_BonusProduct")
                    .IsUnique();

                entity.Property(e => e.CashBackPercent).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.BonusProducts)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusProduct_Bonus");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.BonusProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusProduct_Product");
            });

            modelBuilder.Entity<BonusSegmentSetting>(entity =>
            {
                entity.HasIndex(e => new { e.BonusId, e.SegmentId }, "IX_ClientSegmentGroup_2")
                    .IsUnique();

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.BonusSegmentSettings)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusSegmentSettings_Bonus");

                entity.HasOne(d => d.Segment)
                    .WithMany(p => p.BonusSegmentSettings)
                    .HasForeignKey(d => d.SegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BonusSegmentSettings_Segment");
            });

            modelBuilder.Entity<CRMSetting>(entity =>
            {
                entity.ToTable("CRMSetting");

                entity.HasIndex(e => new { e.Type, e.PartnerId, e.State }, "IX_CMSTriggerSetting")
                    .IsUnique();

                entity.Property(e => e.Condition).HasMaxLength(255);

                entity.Property(e => e.FinishTime).HasPrecision(3);

                entity.Property(e => e.NickeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasPrecision(3);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.CRMSettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CRMSetting_Partner");
            });

            modelBuilder.Entity<CashDesk>(entity =>
            {
                entity.ToTable("CashDesk");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.EncryptIv)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EncryptPassword).HasMaxLength(50);

                entity.Property(e => e.EncryptSalt).HasMaxLength(50);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.MacAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.BetShop)
                    .WithMany(p => p.CashDesks)
                    .HasForeignKey(d => d.BetShopId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashDesk_BetShop");

                entity.HasOne(d => d.CurrentCashier)
                    .WithMany(p => p.CashDesks)
                    .HasForeignKey(d => d.CurrentCashierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashDesk_User");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.CashDesks)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashDesk_UserSession");
            });

            modelBuilder.Entity<CashDeskShift>(entity =>
            {
                entity.ToTable("CashDeskShift");

                entity.Property(e => e.BetAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BonusAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreditCorrectionAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DebitCorrectionAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.DepositAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EndAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.EndTime).HasPrecision(3);

                entity.Property(e => e.PayedWinAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StartAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StartTime).HasPrecision(3);

                entity.Property(e => e.WithdrawAmount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.CashDesk)
                    .WithMany(p => p.CashDeskShifts)
                    .HasForeignKey(d => d.CashDeskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashDeskShift_CashDesk");

                entity.HasOne(d => d.Cashier)
                    .WithMany(p => p.CashDeskShifts)
                    .HasForeignKey(d => d.CashierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashDeskShift_User");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.ToTable("Category");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Percent).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.Categories)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Category_ObjectType");

                entity.HasOne(d => d.Partne)
                    .WithMany(p => p.Categories)
                    .HasForeignKey(d => d.PartneId)
                    .HasConstraintName("FK_Category_Partner");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.ToTable("Client");

                entity.HasIndex(e => new { e.PartnerId, e.UserName }, "IX_Client")
                    .IsUnique();

                entity.HasIndex(e => new { e.PartnerId, e.Email }, "IX_Client_1");

                entity.HasIndex(e => new { e.PartnerId, e.MobileNumber }, "IX_Client_2");

                entity.HasIndex(e => e.PartnerId, "IX_Client_3");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Apartment)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.BuildingNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentIssuedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstDepositDate).HasPrecision(3);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.Info).HasMaxLength(500);

                entity.Property(e => e.LanguageId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastDepositAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.LastDepositDate).HasPrecision(3);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordHash)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationIp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecondName).HasMaxLength(255);

                entity.Property(e => e.SecondSurname).HasMaxLength(255);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ZipCode)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.HasOne(d => d.AffiliateReferral)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.AffiliateReferralId)
                    .HasConstraintName("FK_Client_AffiliateReferral");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Currency");

                entity.HasOne(d => d.JobAreaNavigation)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.JobArea)
                    .HasConstraintName("FK_Client_JobArea");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Client_Language");

                entity.HasOne(d => d.LastSession)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.LastSessionId)
                    .HasConstraintName("FK_Client_ClientSession");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Partner");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Client_Region");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Client_User");
            });

            modelBuilder.Entity<ClientBankInfo>(entity =>
            {
                entity.HasKey(e => e.ClientId);

                entity.ToTable("ClientBankInfo");

                entity.Property(e => e.ClientId).ValueGeneratedNever();

                entity.Property(e => e.LastViewDate).HasPrecision(3);

                entity.HasOne(d => d.BankInfo)
                    .WithMany(p => p.ClientBankInfoes)
                    .HasForeignKey(d => d.BankInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientBankInfo_BankInfo");
            });

            modelBuilder.Entity<ClientBonu>(entity =>
            {
                entity.HasIndex(e => e.CreationDate, "IX_ClientBonus");

                entity.HasIndex(e => new { e.ClientId, e.BonusId, e.ReuseNumber }, "IX_ClientBonus_1")
                    .IsUnique();

                entity.Property(e => e.AwardingTime).HasPrecision(3);

                entity.Property(e => e.BonusPrize).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CalculationTime).HasPrecision(3);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.FinalAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TurnoverAmountLeft).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ValidUntil).HasPrecision(3);

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.ClientBonus)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientBonus_Bonus");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientBonus)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientBonus_Client");

                entity.HasOne(d => d.Trigger)
                    .WithMany(p => p.ClientBonus)
                    .HasForeignKey(d => d.TriggerId)
                    .HasConstraintName("FK_ClientBonus_TriggerSetting");
            });

            modelBuilder.Entity<ClientBonusTrigger>(entity =>
            {
                entity.ToTable("ClientBonusTrigger");

                entity.HasIndex(e => new { e.ClientId, e.BonusId, e.TriggerId, e.ReuseNumber }, "IX_ClientBonusTrigger")
                    .IsUnique();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.SourceAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.WageringAmount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.ClientBonusTriggers)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientBonusTrigger_Bonus");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientBonusTriggers)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_ClientBonusTrigger_Client");

                entity.HasOne(d => d.Trigger)
                    .WithMany(p => p.ClientBonusTriggers)
                    .HasForeignKey(d => d.TriggerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientBonusTrigger_TriggerSetting");
            });

            modelBuilder.Entity<ClientCategory>(entity =>
            {
                entity.ToTable("ClientCategory");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.ClientCategories)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientCategory_Translation");
            });

            modelBuilder.Entity<ClientClassification>(entity =>
            {
                entity.ToTable("ClientClassification");

                entity.HasIndex(e => new { e.ClientId, e.ProductId, e.SegmentId }, "IX_ClientClassification")
                    .IsUnique();

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.ClientClassifications)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_ClientClassification_ClientCategory");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientClassifications)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientClassification_Client");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ClientClassifications)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientClassification_Product");

                entity.HasOne(d => d.Segment)
                    .WithMany(p => p.ClientClassifications)
                    .HasForeignKey(d => d.SegmentId)
                    .HasConstraintName("FK_ClientClassification_Segment");
            });

            modelBuilder.Entity<ClientClosedPeriod>(entity =>
            {
                entity.ToTable("ClientClosedPeriod");

                entity.HasIndex(e => new { e.ClientId, e.Date }, "IX_ClientClosedPeriod")
                    .IsUnique();

                entity.Property(e => e.Date).HasPrecision(3);

                entity.Property(e => e.TotalBetAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalCreditCorrection).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalDebitCorrection).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalDepositAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalGGR).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalNetGaming).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalWinAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.TotalWithdrawAmount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientClosedPeriods)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientClosedPeriod_Client");
            });

            modelBuilder.Entity<ClientFavoriteProduct>(entity =>
            {
                entity.ToTable("ClientFavoriteProduct");

                entity.HasIndex(e => new { e.ClientId, e.ProductId }, "IX_ClientFavoriteProduct")
                    .IsUnique();

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientFavoriteProducts)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientFavoriteProduct_Client");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ClientFavoriteProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientFavoriteProduct_Product");
            });

            modelBuilder.Entity<ClientIdentity>(entity =>
            {
                entity.ToTable("ClientIdentity");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.ExpirationTime).HasPrecision(3);

                entity.Property(e => e.ImagePath)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientIdentities)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientIdentity_Client");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClientIdentities)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ClientIdentity_User");
            });

            modelBuilder.Entity<ClientInfo>(entity =>
            {
                entity.ToTable("ClientInfo");

                entity.HasIndex(e => e.Data, "IX_ClientInfo")
                    .IsUnique();

                entity.HasIndex(e => new { e.ClientId, e.Type, e.State, e.MobileOrEmail }, "IX_ClientInfo_1");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Ip).HasMaxLength(50);

                entity.Property(e => e.MobileOrEmail).HasMaxLength(50);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientInfoes)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_ClientInfo_Client");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.ClientInfoes)
                    .HasForeignKey(d => d.PartnerId)
                    .HasConstraintName("FK_ClientInfo_Partner");
            });

            modelBuilder.Entity<ClientLog>(entity =>
            {
                entity.ToTable("ClientLog");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientLogs)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientLog_Client");

                entity.HasOne(d => d.ClientSession)
                    .WithMany(p => p.ClientLogs)
                    .HasForeignKey(d => d.ClientSessionId)
                    .HasConstraintName("FK_ClientLog_ClientSession");
            });

            modelBuilder.Entity<ClientMessage>(entity =>
            {
                entity.ToTable("ClientMessage");

                entity.HasIndex(e => new { e.ClientId, e.Type }, "IX_ClientMessage");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.Subject).HasMaxLength(200);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientMessages)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_ClientMessage_Client");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.ClientMessages)
                    .HasForeignKey(d => d.EmailId)
                    .HasConstraintName("FK_ClientMessage_ClientMessage");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ClientMessages)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_ClientMessage_UserSession");
            });

            modelBuilder.Entity<ClientMessageState>(entity =>
            {
                entity.ToTable("ClientMessageState");

                entity.HasIndex(e => new { e.ClientId, e.MessageId }, "IX_ClientMessageState")
                    .IsUnique();

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientMessageStates)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientMessageState_Client");

                entity.HasOne(d => d.Message)
                    .WithMany(p => p.ClientMessageStates)
                    .HasForeignKey(d => d.MessageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientMessageState_ClientMessage");
            });

            modelBuilder.Entity<ClientPaymentInfo>(entity =>
            {
                entity.ToTable("ClientPaymentInfo");

                entity.HasIndex(e => new { e.ClientId, e.Type, e.BankName, e.BankIBAN, e.BankAccountNumber, e.CardNumber, e.WalletNumber, e.PartnerPaymentSystemId }, "IX_ClientPaymentInfo")
                    .IsUnique();

                entity.Property(e => e.AccountNickName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BankAccountNumber).HasMaxLength(100);

                entity.Property(e => e.BankIBAN).HasMaxLength(50);

                entity.Property(e => e.BankName).HasMaxLength(100);

                entity.Property(e => e.CardExpireDate).HasPrecision(3);

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientFullName).HasMaxLength(100);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.WalletNumber).HasMaxLength(50);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientPaymentInfoes)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientPaymentInfo_Client");

                entity.HasOne(d => d.PartnerPaymentSystem)
                    .WithMany(p => p.ClientPaymentInfoes)
                    .HasForeignKey(d => d.PartnerPaymentSystemId)
                    .HasConstraintName("FK_ClientPaymentInfo_PartnerPaymentSetting");
            });

            modelBuilder.Entity<ClientPaymentSetting>(entity =>
            {
                entity.ToTable("ClientPaymentSetting");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientPaymentSettings)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientPaymentSetting_Client");

                entity.HasOne(d => d.PartnerPaymentSetting)
                    .WithMany(p => p.ClientPaymentSettings)
                    .HasForeignKey(d => d.PartnerPaymentSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientBlockedPaymentSetting_PartnerPaymentSetting");
            });

            modelBuilder.Entity<ClientSecurityAnswer>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("ClientSecurityAnswer");

                entity.HasIndex(e => new { e.ClientId, e.SecurityQuestionId }, "IX_ClientSecurityAnswer")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientSecurityAnswers)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSecurityAnswer_Client");

                entity.HasOne(d => d.SecurityQuestion)
                    .WithMany(p => p.ClientSecurityAnswers)
                    .HasForeignKey(d => d.SecurityQuestionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSecurityAnswer_SecurityQuestion");
            });

            modelBuilder.Entity<ClientSession>(entity =>
            {
                entity.ToTable("ClientSession");

                entity.HasIndex(e => new { e.Token, e.ProductId }, "IX_ClientSession")
                    .IsUnique();

                entity.HasIndex(e => new { e.ClientId, e.ProductId, e.State }, "IX_ClientSession_1");

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentPage)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndTime).HasPrecision(3);

                entity.Property(e => e.Ip)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.Source).HasMaxLength(1000);

                entity.Property(e => e.StartTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientSessions)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSession_Client");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.ClientSessions)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSession_Language");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_ClientSession_ClientSession");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ClientSessions)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSession_Product");
            });

            modelBuilder.Entity<ClientSetting>(entity =>
            {
                entity.ToTable("ClientSetting");

                entity.HasIndex(e => new { e.ClientId, e.Name, e.UserId }, "IX_ClientSetting")
                    .IsUnique();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.DateValue).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumericValue).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StringValue).HasMaxLength(250);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientSettings)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSetting_Client");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ClientSettings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_ClientSetting_User");
            });

            modelBuilder.Entity<CommentTemplate>(entity =>
            {
                entity.ToTable("CommentTemplate");

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.CommentTemplates)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CommentTemplate_Partner");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.CommentTemplates)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CommentTemplate_Translation");
            });

            modelBuilder.Entity<ComplimentaryPointRate>(entity =>
            {
                entity.ToTable("ComplimentaryPointRate");

                entity.HasIndex(e => new { e.PartnerId, e.ProductId, e.CurrencyId }, "IX_ComplimentaryPointRate")
                    .IsUnique();

                entity.Property(e => e.CreationDate).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateDate).HasPrecision(3);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ComplimentaryPointRates)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComplimentaryCoinRate_Currency");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.ComplimentaryPointRates)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComplimentaryCoinRate_Partner");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ComplimentaryPointRates)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComplimentaryCoinRate_Product");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("Currency");

                entity.Property(e => e.Id)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrentRate).HasColumnType("decimal(18, 12)");

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Symbol)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.Currencies)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Currency_UserSession");
            });

            modelBuilder.Entity<CurrencyRate>(entity =>
            {
                entity.ToTable("CurrencyRate");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.RateAfter).HasColumnType("decimal(18, 12)");

                entity.Property(e => e.RateBefore).HasColumnType("decimal(18, 12)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.CurrencyRates)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rate_Currency");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.CurrencyRates)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CurrencyRate_UserSession");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document");

                entity.HasIndex(e => e.Creator, "IX_Creator");

                entity.HasIndex(e => e.CreationTime, "IX_Document");

                entity.HasIndex(e => e.ParentId, "IX_Document_1");

                entity.HasIndex(e => e.Date, "IX_Document_2");

                entity.HasIndex(e => new { e.Date, e.CashDeskId, e.UserId }, "IX_Document_3");

                entity.HasIndex(e => e.ClientId, "IX_Document_4");

                entity.HasIndex(e => e.UserId, "IX_Document_5");

                entity.HasIndex(e => new { e.GameProviderId, e.OperationTypeId, e.RoundId }, "IX_NC_CreditTransaction");

                entity.HasIndex(e => new { e.OperationTypeId, e.PartnerPaymentSettingId, e.ExternalTransactionId }, "IX_NC_Payments")
                    .IsUnique()
                    .HasFilter("([PartnerPaymentSettingId] IS NOT NULL AND [ExternalTransactionId] IS NOT NULL)");

                entity.HasIndex(e => e.OperationTypeId, "IX_OperationType");

                entity.HasIndex(e => new { e.ExternalTransactionId, e.OperationTypeId, e.GameProviderId, e.ProductId, e.ParentId }, "IX__NC_GameProviderUniqueTransactions")
                    .IsUnique()
                    .HasFilter("([GameProviderId] IS NOT NULL)");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.PossibleWin).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RoundId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CashDesk)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.CashDeskId)
                    .HasConstraintName("FK_Document_CashDesk");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Document_Client");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_Currency");

                entity.HasOne(d => d.GameProvider)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.GameProviderId)
                    .HasConstraintName("FK_Document_GameProvider");

                entity.HasOne(d => d.OperationType)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.OperationTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_OperationType");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Document_Document");

                entity.HasOne(d => d.PartnerPaymentSetting)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.PartnerPaymentSettingId)
                    .HasConstraintName("FK_Document_PartnerPaymentSetting");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Document_Product");
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.ToTable("Email");

                entity.Property(e => e.Body).IsRequired();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Receiver)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.MessageTemplate)
                    .WithMany(p => p.Emails)
                    .HasForeignKey(d => d.MessageTemplateId)
                    .HasConstraintName("FK_Email_MessageTemplate");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Emails)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Email_Partner");
            });

            modelBuilder.Entity<Enumeration>(entity =>
            {
                entity.ToTable("Enumeration");

                entity.Property(e => e.EnumType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.Enumerations)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Enumeration_Translation");
            });

            modelBuilder.Entity<ErrorType>(entity =>
            {
                entity.ToTable("ErrorType");

                entity.HasIndex(e => e.TranslationId, "IX_ErrorType")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithOne(p => p.ErrorType)
                    .HasForeignKey<ErrorType>(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ErrorType_Translation");
            });

            modelBuilder.Entity<GameProvider>(entity =>
            {
                entity.ToTable("GameProvider");

                entity.HasIndex(e => e.Name, "IX_GameProvider")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GameLaunchUrl)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GameProviderSetting>(entity =>
            {
                entity.ToTable("GameProviderSetting");

                entity.HasIndex(e => new { e.GameProviderId, e.ObjectTypeId, e.ObjectId }, "IX_GameProviderSetting")
                    .IsUnique();

                entity.Property(e => e.CreationTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(sysutcdatetime())");

                entity.HasOne(d => d.GameProvider)
                    .WithMany(p => p.GameProviderSettings)
                    .HasForeignKey(d => d.GameProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GameProviderSetting_GameProvider");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.GameProviderSettings)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GameProviderSetting_ObjectType");
            });

            modelBuilder.Entity<Jackpot>(entity =>
            {
                entity.ToTable("Jackpot");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationDate).HasPrecision(3);

                entity.Property(e => e.FinishTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateDate).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.WinAmount)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JackpotSetting>(entity =>
            {
                entity.ToTable("JackpotSetting");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreationDate).HasPrecision(3);

                entity.Property(e => e.LastUpdateDate).HasPrecision(3);

                entity.Property(e => e.Percent).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Jackpot)
                    .WithMany(p => p.JackpotSettings)
                    .HasForeignKey(d => d.JackpotId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JackpotSetting_Jackpot");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.JackpotSettings)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JackpotSetting_Product");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.ToTable("Job");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NextExecutionTime).HasPrecision(3);

                entity.Property(e => e.Parameters)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JobArea>(entity =>
            {
                entity.ToTable("JobArea");

                entity.HasIndex(e => e.NickName, "IX_JobArea")
                    .IsUnique();

                entity.Property(e => e.Info)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.JobAreas)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobArea_Translation");
            });

            modelBuilder.Entity<JobResult>(entity =>
            {
                entity.ToTable("JobResult");

                entity.HasIndex(e => e.JobId, "IX_JobResult");

                entity.Property(e => e.ExecutionTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .IsUnicode(false);

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.JobResults)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobResult_Job");
            });

            modelBuilder.Entity<JobTrigger>(entity =>
            {
                entity.ToTable("JobTrigger");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.JobTriggers)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobTrigger_Client");

                entity.HasOne(d => d.Jackpot)
                    .WithMany(p => p.JobTriggers)
                    .HasForeignKey(d => d.JackpotId)
                    .HasConstraintName("FK_JobTrigger_Jackpot");

                entity.HasOne(d => d.Segment)
                    .WithMany(p => p.JobTriggers)
                    .HasForeignKey(d => d.SegmentId)
                    .HasConstraintName("FK_JobTrigger_Segment");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.ToTable("Language");

                entity.Property(e => e.Id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LimitType>(entity =>
            {
                entity.ToTable("LimitType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Merchant>(entity =>
            {
                entity.ToTable("Merchant");

                entity.Property(e => e.MerchantKey)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MerchantUrl)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Merchants)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Merchant_Partner");
            });

            modelBuilder.Entity<MerchantRequest>(entity =>
            {
                entity.ToTable("MerchantRequest");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RequestUrl)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Response)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MessageTemplate>(entity =>
            {
                entity.ToTable("MessageTemplate");

                entity.HasIndex(e => new { e.PartnerId, e.ClientInfoType, e.NickName }, "IX_MessageTemplate")
                    .IsUnique();

                entity.Property(e => e.ExternalTemplateId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.MessageTemplates)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MessageTemplate_Partner");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.MessageTemplates)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MessageTemplate_Translation");
            });

            modelBuilder.Entity<Note>(entity =>
            {
                entity.ToTable("Note");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.Notes)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Note_UserSession");
            });

            modelBuilder.Entity<ObjectAction>(entity =>
            {
                entity.ToTable("ObjectAction");

                entity.Property(e => e.FinishTime).HasPrecision(3);

                entity.Property(e => e.StartTime).HasPrecision(3);

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.ObjectActions)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectAction_ObjectType");
            });

            modelBuilder.Entity<ObjectChangeHistory>(entity =>
            {
                entity.ToTable("ObjectChangeHistory");

                entity.Property(e => e.ChangeDate).HasPrecision(3);

                entity.Property(e => e.Comment).HasMaxLength(512);

                entity.Property(e => e.Object).IsRequired();

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.ObjectChangeHistories)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectChangeHistory_ObjectType");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.ObjectChangeHistories)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_ObjectChangeHistory_UserSession");
            });

            modelBuilder.Entity<ObjectCurrencyPriority>(entity =>
            {
                entity.ToTable("ObjectCurrencyPriority");

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.ObjectCurrencyPriorities)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientCurrencyPriority_Currency");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.ObjectCurrencyPriorities)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientCurrencyPriority_ObjectType");
            });

            modelBuilder.Entity<ObjectDataChangeHistory>(entity =>
            {
                entity.ToTable("ObjectDataChangeHistory");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumericValue).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.StringValue)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.ObjectDataChangeHistories)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectDataChangeHistory_ObjectType");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ObjectDataChangeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ObjectDataChangeHistory_User");
            });

            modelBuilder.Entity<ObjectType>(entity =>
            {
                entity.ToTable("ObjectType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<OperationType>(entity =>
            {
                entity.ToTable("OperationType");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.OperationTypes)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OperationType_Translation");
            });

            modelBuilder.Entity<Partner>(entity =>
            {
                entity.ToTable("Partner");

                entity.HasIndex(e => e.Name, "IX_Partner")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AdminSiteUrl)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.AutoApproveBetShopDepositMaxAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AutoApproveWithdrawMaxAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AutoConfirmWithdrawMaxAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordRegExp)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.SiteUrl)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UnusedAmountWithdrawPercent).HasColumnType("decimal(6, 2)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Partners)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Partner_Currency");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.Partners)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Partner_UserSession");
            });

            modelBuilder.Entity<PartnerBankInfo>(entity =>
            {
                entity.ToTable("PartnerBankInfo");

                entity.HasIndex(e => new { e.PartnerId, e.PaymentSystemId, e.BankName, e.Type, e.AccountNumber, e.CurrencyId }, "IX_PartnerBankInfo")
                    .IsUnique();

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BankCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IBAN)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.OwnerName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.PartnerBankInfoes)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerBankInfo_Currency");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerBankInfoes)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerBankInfo_Partner");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.PartnerBankInfoes)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .HasConstraintName("FK_PartnerBankInfo_PaymentSystem");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.PartnerBankInfoes)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerBankInfo_Translation");
            });

            modelBuilder.Entity<PartnerCountrySetting>(entity =>
            {
                entity.ToTable("PartnerCountrySetting");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerCountrySettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerCountrySetting_Partner");
            });

            modelBuilder.Entity<PartnerCurrencySetting>(entity =>
            {
                entity.ToTable("PartnerCurrencySetting");

                entity.Property(e => e.ClientMinBet).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.UserMaxLimit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.UserMinLimit).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.PartnerCurrencySettings)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerCurrency_Currency");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerCurrencySettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerCurrency_Partner");
            });

            modelBuilder.Entity<PartnerKey>(entity =>
            {
                entity.ToTable("PartnerKey");

                entity.HasIndex(e => new { e.PartnerId, e.GameProviderId, e.PaymentSystemId, e.Name, e.NotificationServiceId }, "IX_PartnerKey")
                    .IsUnique();

                entity.Property(e => e.DateValue).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StringValue).HasMaxLength(4000);

                entity.HasOne(d => d.GameProvider)
                    .WithMany(p => p.PartnerKeys)
                    .HasForeignKey(d => d.GameProviderId)
                    .HasConstraintName("FK_PartnerKey_GameProvider");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerKeys)
                    .HasForeignKey(d => d.PartnerId)
                    .HasConstraintName("FK_PartnerKey_Partner");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.PartnerKeys)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .HasConstraintName("FK_PartnerKey_PaymentSystem");
            });

            modelBuilder.Entity<PartnerLanguageSetting>(entity =>
            {
                entity.ToTable("PartnerLanguageSetting");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LanguageId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PartnerLanguageSettings)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerLanguageSetting_Language");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerLanguageSettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerLanguageSetting_Partner");
            });

            modelBuilder.Entity<PartnerPaymentCountrySetting>(entity =>
            {
                entity.HasOne(d => d.PartnerPaymentSetting)
                    .WithMany(p => p.PartnerPaymentCountrySettings)
                    .HasForeignKey(d => d.PartnerPaymentSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerPaymentCountrySettings_PartnerPaymentSetting");
            });

            modelBuilder.Entity<PartnerPaymentCurrencyRate>(entity =>
            {
                entity.ToTable("PartnerPaymentCurrencyRate");

                entity.HasIndex(e => new { e.PaymentSettingId, e.CurrencyId }, "IX_PartnerPaymentCurrencyRate")
                    .IsUnique();

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Rate).HasColumnType("decimal(18, 12)");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.PartnerPaymentCurrencyRates)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerPaymentCurrencyRate_Currency");

                entity.HasOne(d => d.PaymentSetting)
                    .WithMany(p => p.PartnerPaymentCurrencyRates)
                    .HasForeignKey(d => d.PaymentSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerPaymentCurrencyRate_PartnerPaymentSetting");
            });

            modelBuilder.Entity<PartnerPaymentSetting>(entity =>
            {
                entity.ToTable("PartnerPaymentSetting");

                entity.HasIndex(e => new { e.PartnerId, e.PaymentSystemId, e.CurrencyId, e.Type }, "IX_PartnerPaymentSetting")
                    .IsUnique();

                entity.Property(e => e.Commission).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Info).HasMaxLength(500);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.MaxAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MinAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.PartnerPaymentSettings)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerPaymentSetting_Currency");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerPaymentSettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerPaymentSetting_Partner");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.PartnerPaymentSettings)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerPaymentSetting_PaymentSystem");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.PartnerPaymentSettings)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerPaymentSetting_UserSession");
            });

            modelBuilder.Entity<PartnerProductSetting>(entity =>
            {
                entity.ToTable("PartnerProductSetting");

                entity.HasIndex(e => new { e.PartnerId, e.ProductId }, "IX_PartnerProduct_PartnerId_ProductId")
                    .IsUnique();

                entity.Property(e => e.Percent).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RTP).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Rating).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerProductSettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerProduct_Partner");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PartnerProductSettings)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerProduct_Product");
            });

            modelBuilder.Entity<ProductCountrySetting>(entity =>
            {
                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductCountrySettings)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCountrySettings_Product");

                entity.HasOne(d => d.Region)
                   .WithMany(p => p.ProductCountrySettings)
                   .HasForeignKey(d => d.CountryId)
                   .OnDelete(DeleteBehavior.ClientSetNull)
                   .HasConstraintName("FK_ProductCountrySettings_Product");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.ProductCountrySettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCountrySetting_Partner");
            });

            modelBuilder.Entity<PaymentLimit>(entity =>
            {
                entity.ToTable("PaymentLimit");

                entity.HasIndex(e => e.ClientId, "IX_PaymentLimit")
                    .IsUnique();

                entity.Property(e => e.EndTime).HasPrecision(3);

                entity.Property(e => e.MaxDepositAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxTotalDepositsAmountPerDay).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxTotalDepositsAmountPerMonth).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxTotalDepositsAmountPerWeek).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxTotalWithdrawsAmountPerDay).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxTotalWithdrawsAmountPerMonth).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxTotalWithdrawsAmountPerWeek).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MaxWithdrawAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StartTime).HasPrecision(3);

                entity.HasOne(d => d.Client)
                    .WithOne(p => p.PaymentLimit)
                    .HasForeignKey<PaymentLimit>(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentLimit_Client");
            });

            modelBuilder.Entity<PaymentRequest>(entity =>
            {
                entity.ToTable("PaymentRequest");

                entity.HasIndex(e => e.PartnerPaymentSettingId, "IX_PaymentRequest");

                entity.HasIndex(e => e.Status, "IX_PaymentRequest_1");

                entity.HasIndex(e => e.Date, "IX_PaymentRequest_2");

                entity.HasIndex(e => e.ClientId, "IX_PaymentRequest_3");

                entity.HasIndex(e => e.Type, "IX_PaymentRequest_4");

                entity.HasIndex(e => e.BetShopId, "IX_PaymentRequest_5");

                entity.HasIndex(e => e.UserId, "IX_PaymentRequest_6");

                entity.HasIndex(e => e.PaymentSystemId, "IX_PaymentRequest_7");

                entity.HasIndex(e => e.CurrencyId, "IX_PaymentRequest_8");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CashCode)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CommissionAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Parameters).HasMaxLength(2000);

                entity.Property(e => e.Type).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.BetShop)
                    .WithMany(p => p.PaymentRequests)
                    .HasForeignKey(d => d.BetShopId)
                    .HasConstraintName("FK_PaymentRequest_BetShop");

                entity.HasOne(d => d.CashDesk)
                    .WithMany(p => p.PaymentRequests)
                    .HasForeignKey(d => d.CashDeskId)
                    .HasConstraintName("FK_PaymentRequest_CashDesk");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.PaymentRequests)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentRequest_Client");

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.PaymentRequests)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentRequest_Currency");

                entity.HasOne(d => d.PartnerPaymentSetting)
                    .WithMany(p => p.PaymentRequests)
                    .HasForeignKey(d => d.PartnerPaymentSettingId)
                    .HasConstraintName("FK_PaymentRequest_PartnerPaymentSetting");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.PaymentRequests)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentRequest_PaymentSystem");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PaymentRequests)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_PaymentRequest_User");
            });

            modelBuilder.Entity<PaymentRequestHistory>(entity =>
            {
                entity.ToTable("PaymentRequestHistory");

                entity.HasIndex(e => e.RequestId, "IX_PaymentRequestHistory");

                entity.Property(e => e.Comment).HasMaxLength(500);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.PaymentRequestHistories)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentRequestHistory_PaymentRequest");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.PaymentRequestHistories)
                    .HasForeignKey(d => d.SessionId)
                    .HasConstraintName("FK_PaymentRequestHistory_UserSession");
            });

            modelBuilder.Entity<PaymentRequestTransfer>(entity =>
            {
                entity.ToTable("PaymentRequestTransfer");

                entity.Property(e => e.LastSendDate).HasPrecision(3);

                entity.HasOne(d => d.PaymentRequest)
                    .WithMany(p => p.PaymentRequestTransfers)
                    .HasForeignKey(d => d.PaymentRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentRequestTransfer_PaymentRequest");

                entity.HasOne(d => d.PaymentSystem)
                    .WithMany(p => p.PaymentRequestTransfers)
                    .HasForeignKey(d => d.PaymentSystemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentRequestTransfer_PaymentSystem");
            });

            modelBuilder.Entity<PaymentSystem>(entity =>
            {
                entity.ToTable("PaymentSystem");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.PaymentSystems)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PaymentSystem_Translation");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.ToTable("Permission");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.PermissionGroup)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.PermissionGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Permission_PermissionGroup");
            });

            modelBuilder.Entity<PermissionGroup>(entity =>
            {
                entity.ToTable("PermissionGroup");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.HasIndex(e => new { e.GameProviderId, e.ExternalId }, "NonClusteredIndex-20160421-183110")
                    .IsUnique()
                    .HasFilter("([GameProviderId] IS NOT NULL AND [Externalid] IS NOT NULL)");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BackgroundImageUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalId)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Jackpot)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.MobileImageUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WebImageUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.GameProvider)
                    .WithMany(p => p.ProductGameProviders)
                    .HasForeignKey(d => d.GameProviderId)
                    .HasConstraintName("FK_Product_GameProvider");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_Product_Product");

                entity.HasOne(d => d.Subprovider)
                    .WithMany(p => p.ProductSubproviders)
                    .HasForeignKey(d => d.SubproviderId)
                    .HasConstraintName("FK_Product_GameProvider1");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Translation");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.ToTable("ProductCategory");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategory_Translation");
            });

            modelBuilder.Entity<ProductLimit>(entity =>
            {
                entity.ToTable("ProductLimit");

                entity.HasIndex(e => new { e.LimitTypeId, e.ObjectId, e.ObjectTypeId, e.ProductId }, "IX_Limit_ObjectId_ObjectTypeId_ProductId_LimitTypeId")
                    .IsUnique();

                entity.Property(e => e.EndTime).HasPrecision(3);

                entity.Property(e => e.MaxLimit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MinLimit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StartTime).HasPrecision(3);

                entity.HasOne(d => d.LimitType)
                    .WithMany(p => p.ProductLimits)
                    .HasForeignKey(d => d.LimitTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Limit_LimitType");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.ProductLimits)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Limit_ObjectType");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductLimits)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_ProductLimit_Product");
            });

            modelBuilder.Entity<PromoCode>(entity =>
            {
                entity.ToTable("PromoCode");

                entity.HasIndex(e => new { e.PartnerId, e.Code, e.Type }, "IX_PromoCode")
                    .IsUnique();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PromoCodes)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromoCode_Partner");
            });

            modelBuilder.Entity<Promotion>(entity =>
            {
                entity.ToTable("Promotion");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.FinishDate).HasPrecision(3);

                entity.Property(e => e.ImageName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasPrecision(3);

                entity.HasOne(d => d.ContentTranslation)
                    .WithMany(p => p.PromotionContentTranslations)
                    .HasForeignKey(d => d.ContentTranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Promotion_ContentTranslation");

                entity.HasOne(d => d.DescriptionTranslation)
                    .WithMany(p => p.PromotionDescriptionTranslations)
                    .HasForeignKey(d => d.DescriptionTranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Promotion_DescriptionTranslation");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Promotions)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Promotion_Partner");

                entity.HasOne(d => d.TitleTranslation)
                    .WithMany(p => p.PromotionTitleTranslations)
                    .HasForeignKey(d => d.TitleTranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Promotion_TitleTranslation");
            });

            modelBuilder.Entity<PromotionSegmentSetting>(entity =>
            {
                entity.ToTable("PromotionSegmentSetting");

                entity.HasOne(d => d.Promotion)
                    .WithMany(p => p.PromotionSegmentSettings)
                    .HasForeignKey(d => d.PromotionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromotionSegmentSetting_Promotion");

                entity.HasOne(d => d.Segment)
                    .WithMany(p => p.PromotionSegmentSettings)
                    .HasForeignKey(d => d.SegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromotionSegmentSetting_Segment");
            });

            modelBuilder.Entity<PromotionLanguageSetting>(entity =>
            {
                entity.ToTable("PromotionLanguageSetting");

                entity.HasOne(d => d.Promotion)
                    .WithMany(p => p.PromotionLanguageSettings)
                    .HasForeignKey(d => d.PromotionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromotionLanguageSetting_Promotion");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.PromotionLanguageSettings)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PromotionLanguageSetting_Segment");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.ToTable("Region");

                entity.Property(e => e.CurrencyId)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Info)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsoCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IsoCode3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LanguageId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Regions)
                    .HasForeignKey(d => d.CurrencyId)
                    .HasConstraintName("FK_Region_Currency");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Regions)
                    .HasForeignKey(d => d.LanguageId)
                    .HasConstraintName("FK_Region_Language");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.Regions)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Region_Translation");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Roles)
                    .HasForeignKey(d => d.PartnerId)
                    .HasConstraintName("FK_Role_Partner");
            });

            modelBuilder.Entity<RolePermission>(entity =>
            {
                entity.ToTable("RolePermission");

                entity.HasIndex(e => new { e.RoleId, e.PermissionId }, "IX_RolePermission")
                    .IsUnique();

                entity.Property(e => e.PermissionId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.RolePermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("FK_RolePermission_Permission");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RolePermissions)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolePermission_Role1");
            });

            modelBuilder.Entity<SecurityQuestion>(entity =>
            {
                entity.ToTable("SecurityQuestion");

                entity.HasIndex(e => e.TranslationId, "IX_SecurityQuestion")
                    .IsUnique();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.NickName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.SecurityQuestions)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityQuestion_Partner");

                entity.HasOne(d => d.Translation)
                    .WithOne(p => p.SecurityQuestion)
                    .HasForeignKey<SecurityQuestion>(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SecurityQuestion_SecurityQuestion");
            });

            modelBuilder.Entity<Segment>(entity =>
            {
                entity.ToTable("Segment");

                entity.HasIndex(e => new { e.Name, e.PartnerId }, "IX_Segment")
                    .IsUnique();

                entity.Property(e => e.AffiliateId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Bonus)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CasinoBetsCount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClientId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ClientStatus)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ComplimentaryPoint)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.MobileCode)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Profit)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentId)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SessionPeriod)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SignUpPeriod)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SportBetsCount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SuccessDepositPaymentSystem)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SuccessWithdrawalPaymentSystem)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBetsAmount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBetsCount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDepositsAmount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TotalDepositsCount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TotalWithdrawalsAmount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TotalWithdrawalsCount)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Segments)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Segment_Partner");
            });

            modelBuilder.Entity<SegmentSetting>(entity =>
            {
                entity.ToTable("SegmentSetting");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.DateValue).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NumericValue).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.StringValue).HasMaxLength(250);

                entity.HasOne(d => d.Segment)
                    .WithMany(p => p.SegmentSettings)
                    .HasForeignKey(d => d.SegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SegmentSetting_Segment1");
            });

            modelBuilder.Entity<Ticket>(entity =>
            {
                entity.ToTable("Ticket");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastMessageTime).HasPrecision(3);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Ticket_Client");

                entity.HasOne(d => d.LastMessageUser)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.LastMessageUserId)
                    .HasConstraintName("FK_Ticket_User");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticket_Partner");
            });

            modelBuilder.Entity<TicketMessage>(entity =>
            {
                entity.ToTable("TicketMessage");

                entity.HasIndex(e => e.TicketId, "IX_TicketMessage");

                entity.HasIndex(e => e.UserId, "IX_TicketMessage_1");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Message).IsRequired();

                entity.HasOne(d => d.Ticket)
                    .WithMany(p => p.TicketMessages)
                    .HasForeignKey(d => d.TicketId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TicketMessage_Ticket");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TicketMessages)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_TicketMessage_User");
            });

            modelBuilder.Entity<TicketMessageState>(entity =>
            {
                entity.ToTable("TicketMessageState");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.TicketMessageStates)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_TicketMessageState_Client");

                entity.HasOne(d => d.Message)
                    .WithMany(p => p.TicketMessageStates)
                    .HasForeignKey(d => d.MessageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TicketMessageState_TicketMessage");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.TicketMessageStates)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_TicketMessageState_User");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.ToTable("Transaction");

                entity.HasIndex(e => e.Date, "IX_Transaction");

                entity.HasIndex(e => e.AccountId, "IX_Transaction_1");

                entity.HasIndex(e => e.DocumentId, "IX_Transaction_2");

                entity.HasIndex(e => e.CreationTime, "IX_Transaction_CreationTime");

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.AccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transaction_Account");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.DocumentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transaction_Document");
            });

            modelBuilder.Entity<Translation>(entity =>
            {
                entity.ToTable("Translation");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<TranslationEntry>(entity =>
            {
                entity.ToTable("TranslationEntry");

                entity.HasIndex(e => new { e.TranslationId, e.LanguageId }, "IX_TranslationEntry")
                    .IsUnique();

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LanguageId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Text).IsRequired();

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.TranslationEntries)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TranslationEntry_Language");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.TranslationEntries)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TranslationEntry_UserSession");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.TranslationEntries)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TranslationEntry_Translation");
            });

            modelBuilder.Entity<TriggerGroup>(entity =>
            {
                entity.ToTable("TriggerGroup");

                entity.HasIndex(e => new { e.BonusId, e.Name }, "IX_TriggerGroup")
                    .IsUnique();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.TriggerGroups)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerGroup_Bonus");
            });

            modelBuilder.Entity<TriggerGroupSetting>(entity =>
            {
                entity.ToTable("TriggerGroupSetting");

                entity.HasIndex(e => new { e.GroupId, e.SettingId }, "IX_TriggerGroupSetting")
                    .IsUnique();

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.TriggerGroupSettings)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerGroupSetting_TriggerGroup");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.TriggerGroupSettings)
                    .HasForeignKey(d => d.SettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerGroupSetting_TriggerSetting");
            });

            modelBuilder.Entity<TriggerProductSetting>(entity =>
            {
                entity.ToTable("TriggerProductSetting");

                entity.HasIndex(e => new { e.TriggerSettingId, e.ProductId }, "IX_TriggerProductSetting")
                    .IsUnique();

                entity.Property(e => e.Percent).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TriggerProductSettings)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerProductSetting_Product");

                entity.HasOne(d => d.TriggerSetting)
                    .WithMany(p => p.TriggerProductSettings)
                    .HasForeignKey(d => d.TriggerSettingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerProductSetting_TriggerSetting");
            });

            modelBuilder.Entity<TriggerSetting>(entity =>
            {
                entity.ToTable("TriggerSetting");

                entity.Property(e => e.BonusSettingCodes).HasMaxLength(500);

                entity.Property(e => e.Condition).IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FinishTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.MaxAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MinAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.StartTime).HasPrecision(3);

                entity.Property(e => e.UpToAmount).HasColumnType("decimal(18, 4)");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.TriggerSettings)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerSetting_Partner");

                entity.HasOne(d => d.Segment)
                    .WithMany(p => p.TriggerSettings)
                    .HasForeignKey(d => d.SegmentId)
                    .HasConstraintName("FK_TriggerSetting_Segment");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.TriggerSettings)
                    .HasForeignKey(d => d.TranslationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerSetting_Translation");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("User");

                entity.HasIndex(e => e.UserName, "IX_User")
                    .IsUnique();

                entity.HasIndex(e => e.Path, "IX_User_1");

                entity.Property(e => e.AdminState).IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordChangedDate).HasPrecision(3);

                entity.Property(e => e.PasswordHash)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Path)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.QRCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SecurityCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Currency");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Language");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Partner");

                entity.HasOne(d => d.Session)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.SessionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_UserSession");
            });

            modelBuilder.Entity<Affiliate>(entity =>
            {
                entity.ToTable("Affiliate");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.CurrencyId)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LanguageId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MobileNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NickName)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordHash)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.Currency)
                    .WithMany(p => p.Affiliates)
                    .HasForeignKey(d => d.CurrencyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Affiliate_Currency");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.Affiliates)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Affiliate_Language");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Affiliates)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Affiliate_Partner");
            });

            modelBuilder.Entity<UserLog>(entity =>
            {
                entity.ToTable("UserLog");

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Page)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RequestMethod)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserLog_User");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.ToTable("UserRole");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRole_Role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRole_User");
            });

            modelBuilder.Entity<UserSession>(entity =>
            {
                entity.ToTable("UserSession");

                entity.HasIndex(e => e.Token, "IX_UserSession")
                    .IsUnique();

                entity.HasIndex(e => e.ParentId, "IX_UserSession_1");

                entity.HasIndex(e => new { e.UserId, e.State }, "IX_UserSession_UserId_State");

                entity.Property(e => e.EndTime).HasPrecision(3);

                entity.Property(e => e.Ip)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LanguageId)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LastUpdateTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StartTime)
                    .HasPrecision(3)
                    .HasDefaultValueSql("(sysutcdatetime())");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CashDesk)
                    .WithMany(p => p.UserSessions)
                    .HasForeignKey(d => d.CashDeskId)
                    .HasConstraintName("FK_UserSession_CashDesk");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.UserSessions)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserSession_Language");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserSessions)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserSession_User");
            });

            modelBuilder.Entity<UserSetting>(entity =>
            {
                entity.ToTable("UserSetting");

                entity.Property(e => e.AgentMaxCredit).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.CalculationPeriod)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CountLimits)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CreationTime).HasPrecision(3);

                entity.Property(e => e.LastUpdateTime).HasPrecision(3);

                entity.Property(e => e.LevelLimits)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserSettings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserSetting_User");
            });

            modelBuilder.Entity<WebSiteMenu>(entity =>
            {
                entity.ToTable("WebSiteMenu");

                entity.HasIndex(e => new { e.PartnerId, e.Type }, "IX_WebSiteMenu")
                    .IsUnique();

                entity.Property(e => e.StyleType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.WebSiteMenus)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WebSiteMenu_Partner");
            });

            modelBuilder.Entity<WebSiteMenuItem>(entity =>
            {
                entity.ToTable("WebSiteMenuItem");

                entity.HasIndex(e => new { e.MenuId, e.Title }, "IX_WebSiteMenuItem")
                    .IsUnique();

                entity.Property(e => e.Href)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Icon)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.StyleType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.WebSiteMenuItems)
                    .HasForeignKey(d => d.MenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WebSiteMenuItem_WebSiteMenu1");
            });

            modelBuilder.Entity<WebSiteSubMenuItem>(entity =>
            {
                entity.ToTable("WebSiteSubMenuItem");

                entity.HasIndex(e => new { e.MenuItemId, e.Title }, "IX_WebSiteSubMenuItem")
                    .IsUnique();

                entity.Property(e => e.Href)
                    .IsRequired()
                    .HasMaxLength(4000);

                entity.Property(e => e.Icon)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.MenuItem)
                    .WithMany(p => p.WebSiteSubMenuItems)
                    .HasForeignKey(d => d.MenuItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WebSiteSubMenuItem_WebSiteMenuItem");

                entity.HasOne(d => d.Translation)
                    .WithMany(p => p.WebSiteSubMenuItems)
                    .HasForeignKey(d => d.TranslationId)
                    .HasConstraintName("FK_WebSiteSubMenuItem_Translation");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingGeneratedFunctions(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}