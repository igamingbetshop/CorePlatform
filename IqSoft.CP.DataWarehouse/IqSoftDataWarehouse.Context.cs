//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IqSoft.CP.DataWarehouse
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IqSoftDataWarehouseEntities : DbContext
    {
        public IqSoftDataWarehouseEntities()
            : base("name=IqSoftDataWarehouseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Bet> Bets { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<Client> Clients { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<GameProvider> GameProviders { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<ClientSession> ClientSessions { get; set; }
        public DbSet<ClientBonu> ClientBonus { get; set; }
        public DbSet<Gtd_Dashboard_Info> Gtd_Dashboard_Info { get; set; }
        public DbSet<Gtd_Provider_Bets> Gtd_Provider_Bets { get; set; }
        public DbSet<PaymentRequest> PaymentRequests { get; set; }
        public DbSet<Gtd_Deposit_Info> Gtd_Deposit_Info { get; set; }
        public DbSet<Gtd_Withdraw_Info> Gtd_Withdraw_Info { get; set; }
        public DbSet<JobTrigger> JobTriggers { get; set; }
        public DbSet<AffiliatePlatform> AffiliatePlatforms { get; set; }
        public DbSet<Partner> Partners { get; set; }
        public DbSet<AffiliateReferral> AffiliateReferrals { get; set; }
        public DbSet<Bonu> Bonus { get; set; }
    
        public virtual int sp_InsertDocuments(Nullable<long> minId)
        {
            var minIdParameter = minId.HasValue ?
                new ObjectParameter("minId", minId) :
                new ObjectParameter("minId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertDocuments", minIdParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_AffiliateClient")]
        public virtual IQueryable<fnAffiliateClient> fn_AffiliateClient(Nullable<long> fromDate, Nullable<long> toDate, Nullable<int> partnerId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAffiliateClient>("[IqSoftDataWarehouseEntities].[fn_AffiliateClient](@FromDate, @ToDate, @PartnerId)", fromDateParameter, toDateParameter, partnerIdParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_BetShopBet")]
        public virtual IQueryable<fnBetShopBet> fn_BetShopBet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnBetShopBet>("[IqSoftDataWarehouseEntities].[fn_BetShopBet]()");
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_ClientReport")]
        public virtual IQueryable<fnClientReport> fn_ClientReport(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientReport>("[IqSoftDataWarehouseEntities].[fn_ClientReport](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_InternetBet")]
        public virtual IQueryable<fnInternetBet> fn_InternetBet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnInternetBet>("[IqSoftDataWarehouseEntities].[fn_InternetBet]()");
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_InternetGame")]
        public virtual IQueryable<fnInternetGame> fn_InternetGame(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnInternetGame>("[IqSoftDataWarehouseEntities].[fn_InternetGame](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_ProfitByAgent")]
        public virtual IQueryable<fnProfitByAgent> fn_ProfitByAgent(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnProfitByAgent>("[IqSoftDataWarehouseEntities].[fn_ProfitByAgent](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_ProfitByClientProduct")]
        public virtual IQueryable<fnProfitByClientProduct> fn_ProfitByClientProduct(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnProfitByClientProduct>("[IqSoftDataWarehouseEntities].[fn_ProfitByClientProduct](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_ReportByPartner")]
        public virtual IQueryable<fnReportByPartner> fn_ReportByPartner(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByPartner>("[IqSoftDataWarehouseEntities].[fn_ReportByPartner](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_ReportByProvider")]
        public virtual IQueryable<fnReportByProvider> fn_ReportByProvider(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByProvider>("[IqSoftDataWarehouseEntities].[fn_ReportByProvider](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftDataWarehouseEntities", "fn_Document")]
        public virtual IQueryable<fnDocument> fn_Document()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnDocument>("[IqSoftDataWarehouseEntities].[fn_Document]()");
        }
    }
}
