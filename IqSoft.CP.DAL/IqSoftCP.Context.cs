//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IqSoft.CP.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IqSoftCorePlatformEntities : DbContext
    {
        public IqSoftCorePlatformEntities()
            : base("name=IqSoftCorePlatformEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<AccessObject> AccessObjects { get; set; }
        public virtual DbSet<AccountBalance> AccountBalances { get; set; }
        public virtual DbSet<AccountClosedPeriod> AccountClosedPeriods { get; set; }
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<AccountTypeKind> AccountTypeKinds { get; set; }
        public virtual DbSet<AccountTypePriority> AccountTypePriorities { get; set; }
        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<ActionLog> ActionLogs { get; set; }
        public virtual DbSet<AgentCommission> AgentCommissions { get; set; }
        public virtual DbSet<BannerSegmentSetting> BannerSegmentSettings { get; set; }
        public virtual DbSet<BetShopReconing> BetShopReconings { get; set; }
        public virtual DbSet<BetShopTicket> BetShopTickets { get; set; }
        public virtual DbSet<BonusCountrySetting> BonusCountrySettings { get; set; }
        public virtual DbSet<BonusCurrencySetting> BonusCurrencySettings { get; set; }
        public virtual DbSet<BonusLanguageSetting> BonusLanguageSettings { get; set; }
        public virtual DbSet<BonusPaymentSystemSetting> BonusPaymentSystemSettings { get; set; }
        public virtual DbSet<BonusSegmentSetting> BonusSegmentSettings { get; set; }
        public virtual DbSet<CashDesk> CashDesks { get; set; }
        public virtual DbSet<CashDeskShift> CashDeskShifts { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<ClientBankInfo> ClientBankInfoes { get; set; }
        public virtual DbSet<ClientCategory> ClientCategories { get; set; }
        public virtual DbSet<ClientClassification> ClientClassifications { get; set; }
        public virtual DbSet<ClientClosedPeriod> ClientClosedPeriods { get; set; }
        public virtual DbSet<ClientFavoriteProduct> ClientFavoriteProducts { get; set; }
        public virtual DbSet<ClientIdentity> ClientIdentities { get; set; }
        public virtual DbSet<ClientLog> ClientLogs { get; set; }
        public virtual DbSet<ClientSession> ClientSessions { get; set; }
        public virtual DbSet<ComplimentaryPointRate> ComplimentaryPointRates { get; set; }
        public virtual DbSet<CRMSetting> CRMSettings { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRates { get; set; }
        public virtual DbSet<Enumeration> Enumerations { get; set; }
        public virtual DbSet<ErrorType> ErrorTypes { get; set; }
        public virtual DbSet<GameProviderSetting> GameProviderSettings { get; set; }
        public virtual DbSet<Jackpot> Jackpots { get; set; }
        public virtual DbSet<JackpotSetting> JackpotSettings { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobArea> JobAreas { get; set; }
        public virtual DbSet<JobResult> JobResults { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LimitType> LimitTypes { get; set; }
        public virtual DbSet<Merchant> Merchants { get; set; }
        public virtual DbSet<MerchantRequest> MerchantRequests { get; set; }
        public virtual DbSet<ObjectAction> ObjectActions { get; set; }
        public virtual DbSet<ObjectChangeHistory> ObjectChangeHistories { get; set; }
        public virtual DbSet<ObjectCurrencyPriority> ObjectCurrencyPriorities { get; set; }
        public virtual DbSet<ObjectDataChangeHistory> ObjectDataChangeHistories { get; set; }
        public virtual DbSet<ObjectType> ObjectTypes { get; set; }
        public virtual DbSet<OperationType> OperationTypes { get; set; }
        public virtual DbSet<PartnerCountrySetting> PartnerCountrySettings { get; set; }
        public virtual DbSet<PartnerCurrencySetting> PartnerCurrencySettings { get; set; }
        public virtual DbSet<PartnerPaymentCountrySetting> PartnerPaymentCountrySettings { get; set; }
        public virtual DbSet<PartnerPaymentCurrencyRate> PartnerPaymentCurrencyRates { get; set; }
        public virtual DbSet<PaymentLimit> PaymentLimits { get; set; }
        public virtual DbSet<PaymentRequestHistory> PaymentRequestHistories { get; set; }
        public virtual DbSet<PaymentRequestTransfer> PaymentRequestTransfers { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PermissionGroup> PermissionGroups { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductLimit> ProductLimits { get; set; }
        public virtual DbSet<PromoCode> PromoCodes { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<PromotionSegmentSetting> PromotionSegmentSettings { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<Segment> Segments { get; set; }
        public virtual DbSet<SegmentSetting> SegmentSettings { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TicketMessage> TicketMessages { get; set; }
        public virtual DbSet<TicketMessageState> TicketMessageStates { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TriggerGroup> TriggerGroups { get; set; }
        public virtual DbSet<TriggerGroupSetting> TriggerGroupSettings { get; set; }
        public virtual DbSet<TriggerProductSetting> TriggerProductSettings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<WebSiteMenu> WebSiteMenus { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<SecurityQuestion> SecurityQuestions { get; set; }
        public virtual DbSet<ClientSecurityAnswer> ClientSecurityAnswers { get; set; }
        public virtual DbSet<UserSetting> UserSettings { get; set; }
        public virtual DbSet<PromotionLanguageSetting> PromotionLanguageSettings { get; set; }
        public virtual DbSet<AgentProfit> AgentProfits { get; set; }
        public virtual DbSet<WebSiteSubMenuItem> WebSiteSubMenuItems { get; set; }
        public virtual DbSet<NotificationService> NotificationServices { get; set; }
        public virtual DbSet<ProductCountrySetting> ProductCountrySettings { get; set; }
        public virtual DbSet<ClientPaymentInfo> ClientPaymentInfoes { get; set; }
        public virtual DbSet<Affiliate> Affiliates { get; set; }
        public virtual DbSet<AffiliateCommission> AffiliateCommissions { get; set; }
        public virtual DbSet<UserSession> UserSessions { get; set; }
        public virtual DbSet<AffiliateReferral> AffiliateReferrals { get; set; }
        public virtual DbSet<AffiliatePlatform> AffiliatePlatforms { get; set; }
        public virtual DbSet<UserState> UserStates { get; set; }
        public virtual DbSet<JobTrigger> JobTriggers { get; set; }
        public virtual DbSet<ClientSetting> ClientSettings { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }
        public virtual DbSet<WebSiteMenuItem> WebSiteMenuItems { get; set; }
        public virtual DbSet<PartnerProductSetting> PartnerProductSettings { get; set; }
        public virtual DbSet<BonusProduct> BonusProducts { get; set; }
        public virtual DbSet<PartnerKey> PartnerKeys { get; set; }
        public virtual DbSet<Bonu> Bonus { get; set; }
        public virtual DbSet<Email> Emails { get; set; }
        public virtual DbSet<Banner> Banners { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<CommentTemplate> CommentTemplates { get; set; }
        public virtual DbSet<BetShop> BetShops { get; set; }
        public virtual DbSet<BetShopGroup> BetShopGroups { get; set; }
        public virtual DbSet<PartnerBankInfo> PartnerBankInfoes { get; set; }
        public virtual DbSet<BannerLanguageSetting> BannerLanguageSettings { get; set; }
        public virtual DbSet<AmountCurrencySetting> AmountCurrencySettings { get; set; }
        public virtual DbSet<GameProviderCurrencySetting> GameProviderCurrencySettings { get; set; }
        public virtual DbSet<UserConfiguration> UserConfigurations { get; set; }
        public virtual DbSet<PartnerLanguageSetting> PartnerLanguageSettings { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Translation> Translations { get; set; }
        public virtual DbSet<TranslationEntry> TranslationEntries { get; set; }
        public virtual DbSet<ClientBonu> ClientBonus { get; set; }
        public virtual DbSet<ClientBonusTrigger> ClientBonusTriggers { get; set; }
        public virtual DbSet<PaymentRequest> PaymentRequests { get; set; }
        public virtual DbSet<AnnouncementSetting> AnnouncementSettings { get; set; }
        public virtual DbSet<Announcement> Announcements { get; set; }
        public virtual DbSet<Character> Characters { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsLanguageSetting> NewsLanguageSettings { get; set; }
        public virtual DbSet<NewsSegmentSetting> NewsSegmentSettings { get; set; }
        public virtual DbSet<GameProvider> GameProviders { get; set; }
        public virtual DbSet<PaymentSystem> PaymentSystems { get; set; }
        public virtual DbSet<PopupSetting> PopupSettings { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ClientMessageState> ClientMessageStates { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientPaymentSetting> ClientPaymentSettings { get; set; }
        public virtual DbSet<ClientInfo> ClientInfoes { get; set; }
        public virtual DbSet<ClientMessage> ClientMessages { get; set; }
        public virtual DbSet<TriggerSetting> TriggerSettings { get; set; }
        public virtual DbSet<AdminMenu> AdminMenus { get; set; }
        public virtual DbSet<PartnerPaymentSetting> PartnerPaymentSettings { get; set; }
        public virtual DbSet<Popup> Popups { get; set; }
    
        public virtual int sp_GetBetShopLock(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBetShopLock", idParameter);
        }
    
        public virtual int sp_GetBonusLock(Nullable<int> bonusId)
        {
            var bonusIdParameter = bonusId.HasValue ?
                new ObjectParameter("BonusId", bonusId) :
                new ObjectParameter("BonusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetBonusLock", bonusIdParameter);
        }
    
        public virtual int sp_GetClientLock(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetClientLock", clientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> sp_GetDbDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("sp_GetDbDate");
        }
    
        public virtual int sp_UpdateClientSession(Nullable<long> id, Nullable<int> clientId, Nullable<int> productId, string currentPage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var currentPageParameter = currentPage != null ?
                new ObjectParameter("CurrentPage", currentPage) :
                new ObjectParameter("CurrentPage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateClientSession", idParameter, clientIdParameter, productIdParameter, currentPageParameter);
        }
    
        public virtual ObjectResult<spObjectChangeHistory> sp_ObjectChangeHistory(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> objectTypeId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var objectTypeIdParameter = objectTypeId.HasValue ?
                new ObjectParameter("ObjectTypeId", objectTypeId) :
                new ObjectParameter("ObjectTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObjectChangeHistory>("sp_ObjectChangeHistory", fromDateParameter, toDateParameter, objectTypeIdParameter);
        }
    
        public virtual int sp_CreateWebSiteMenuCopy(Nullable<int> fromPartner, Nullable<int> toPartner, Nullable<int> menuId)
        {
            var fromPartnerParameter = fromPartner.HasValue ?
                new ObjectParameter("FromPartner", fromPartner) :
                new ObjectParameter("FromPartner", typeof(int));
    
            var toPartnerParameter = toPartner.HasValue ?
                new ObjectParameter("ToPartner", toPartner) :
                new ObjectParameter("ToPartner", typeof(int));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreateWebSiteMenuCopy", fromPartnerParameter, toPartnerParameter, menuIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_AccountType")]
        public virtual IQueryable<fnAccountType> fn_AccountType(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAccountType>("[IqSoftCorePlatformEntities].[fn_AccountType](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ActionLog")]
        public virtual IQueryable<fnActionLog> fn_ActionLog(string languageId, Nullable<long> fromDate, Nullable<long> toDate)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnActionLog>("[IqSoftCorePlatformEntities].[fn_ActionLog](@LanguageId, @FromDate, @ToDate)", languageIdParameter, fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_AdminShiftReport")]
        public virtual IQueryable<fnAdminShiftReport> fn_AdminShiftReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAdminShiftReport>("[IqSoftCorePlatformEntities].[fn_AdminShiftReport]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Agent")]
        public virtual IQueryable<fnAgent> fn_Agent(Nullable<int> agentId)
        {
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAgent>("[IqSoftCorePlatformEntities].[fn_Agent](@AgentId)", agentIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_AgentProfitReport")]
        public virtual IQueryable<fnAgentProfitReport> fn_AgentProfitReport(Nullable<long> fromDate, Nullable<long> toDate, Nullable<int> agentId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAgentProfitReport>("[IqSoftCorePlatformEntities].[fn_AgentProfitReport](@FromDate, @ToDate, @AgentId)", fromDateParameter, toDateParameter, agentIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_AgentTransaction")]
        public virtual IQueryable<fnAgentTransaction> fn_AgentTransaction(Nullable<long> fromDate, Nullable<long> toDate, Nullable<int> agentId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAgentTransaction>("[IqSoftCorePlatformEntities].[fn_AgentTransaction](@FromDate, @ToDate, @AgentId)", fromDateParameter, toDateParameter, agentIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_AgentTurnoverProfit")]
        public virtual IQueryable<fnAgentTurnoverProfit> fn_AgentTurnoverProfit(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAgentTurnoverProfit>("[IqSoftCorePlatformEntities].[fn_AgentTurnoverProfit](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_BetShopReconing")]
        public virtual IQueryable<fnBetShopReconing> fn_BetShopReconing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnBetShopReconing>("[IqSoftCorePlatformEntities].[fn_BetShopReconing]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_CashDeskTransaction")]
        public virtual IQueryable<fnCashDeskTransaction> fn_CashDeskTransaction(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCashDeskTransaction>("[IqSoftCorePlatformEntities].[fn_CashDeskTransaction](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ClientIdentity")]
        public virtual IQueryable<fnClientIdentity> fn_ClientIdentity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientIdentity>("[IqSoftCorePlatformEntities].[fn_ClientIdentity]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ClientInfo")]
        public virtual IQueryable<fnClientInfo> fn_ClientInfo(Nullable<System.DateTime> lastClosedPeriodDate)
        {
            var lastClosedPeriodDateParameter = lastClosedPeriodDate.HasValue ?
                new ObjectParameter("LastClosedPeriodDate", lastClosedPeriodDate) :
                new ObjectParameter("LastClosedPeriodDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientInfo>("[IqSoftCorePlatformEntities].[fn_ClientInfo](@LastClosedPeriodDate)", lastClosedPeriodDateParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ClientLog")]
        public virtual IQueryable<fnClientLog> fn_ClientLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientLog>("[IqSoftCorePlatformEntities].[fn_ClientLog]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ConvertCurrency")]
        public virtual IQueryable<Nullable<decimal>> fn_ConvertCurrency(string fromCurrency, string toCurrency, Nullable<decimal> amount)
        {
            var fromCurrencyParameter = fromCurrency != null ?
                new ObjectParameter("fromCurrency", fromCurrency) :
                new ObjectParameter("fromCurrency", typeof(string));
    
            var toCurrencyParameter = toCurrency != null ?
                new ObjectParameter("toCurrency", toCurrency) :
                new ObjectParameter("toCurrency", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<decimal>>("[IqSoftCorePlatformEntities].[fn_ConvertCurrency](@fromCurrency, @toCurrency, @amount)", fromCurrencyParameter, toCurrencyParameter, amountParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Enumeration")]
        public virtual IQueryable<fnEnumeration> fn_Enumeration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnEnumeration>("[IqSoftCorePlatformEntities].[fn_Enumeration]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ErrorType")]
        public virtual IQueryable<fnErrorType> fn_ErrorType(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnErrorType>("[IqSoftCorePlatformEntities].[fn_ErrorType](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_FirstTimePaymentRequest")]
        public virtual IQueryable<fnFirstTimePaymentRequest> fn_FirstTimePaymentRequest(string currency, Nullable<bool> convertAmounts)
        {
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var convertAmountsParameter = convertAmounts.HasValue ?
                new ObjectParameter("ConvertAmounts", convertAmounts) :
                new ObjectParameter("ConvertAmounts", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnFirstTimePaymentRequest>("[IqSoftCorePlatformEntities].[fn_FirstTimePaymentRequest](@Currency, @ConvertAmounts)", currencyParameter, convertAmountsParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_GetChildProductsByProductId")]
        public virtual IQueryable<Nullable<int>> fn_GetChildProductsByProductId(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<int>>("[IqSoftCorePlatformEntities].[fn_GetChildProductsByProductId](@productId)", productIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_GetOrderedAccountIds")]
        public virtual IQueryable<Nullable<long>> fn_GetOrderedAccountIds(Nullable<long> objectId, Nullable<int> objectTypeId, string currencyId, Nullable<int> operationTypeId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("ObjectId", objectId) :
                new ObjectParameter("ObjectId", typeof(long));
    
            var objectTypeIdParameter = objectTypeId.HasValue ?
                new ObjectParameter("ObjectTypeId", objectTypeId) :
                new ObjectParameter("ObjectTypeId", typeof(int));
    
            var currencyIdParameter = currencyId != null ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(string));
    
            var operationTypeIdParameter = operationTypeId.HasValue ?
                new ObjectParameter("OperationTypeId", operationTypeId) :
                new ObjectParameter("OperationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Nullable<long>>("[IqSoftCorePlatformEntities].[fn_GetOrderedAccountIds](@ObjectId, @ObjectTypeId, @CurrencyId, @OperationTypeId)", objectIdParameter, objectTypeIdParameter, currencyIdParameter, operationTypeIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_InternetBetByClient")]
        public virtual IQueryable<fnInternetBetByClient> fn_InternetBetByClient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnInternetBetByClient>("[IqSoftCorePlatformEntities].[fn_InternetBetByClient]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_JobArea")]
        public virtual IQueryable<fnJobArea> fn_JobArea(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnJobArea>("[IqSoftCorePlatformEntities].[fn_JobArea](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ObjectTranslationEntry")]
        public virtual IQueryable<fnObjectTranslationEntry> fn_ObjectTranslationEntry(Nullable<int> objectTypeId, string searchText, string languageId)
        {
            var objectTypeIdParameter = objectTypeId.HasValue ?
                new ObjectParameter("ObjectTypeId", objectTypeId) :
                new ObjectParameter("ObjectTypeId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnObjectTranslationEntry>("[IqSoftCorePlatformEntities].[fn_ObjectTranslationEntry](@ObjectTypeId, @SearchText, @LanguageId)", objectTypeIdParameter, searchTextParameter, languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_OnlineUser")]
        public virtual IQueryable<fnOnlineUser> fn_OnlineUser(Nullable<int> agentId)
        {
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("AgentId", agentId) :
                new ObjectParameter("AgentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnOnlineUser>("[IqSoftCorePlatformEntities].[fn_OnlineUser](@AgentId)", agentIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_OperationType")]
        public virtual IQueryable<fnOperationType> fn_OperationType(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnOperationType>("[IqSoftCorePlatformEntities].[fn_OperationType](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_PartnerBankInfo")]
        public virtual IQueryable<fnPartnerBankInfo> fn_PartnerBankInfo(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPartnerBankInfo>("[IqSoftCorePlatformEntities].[fn_PartnerBankInfo](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ProductCategory")]
        public virtual IQueryable<fnProductCategory> fn_ProductCategory(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnProductCategory>("[IqSoftCorePlatformEntities].[fn_ProductCategory](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ProductGroup")]
        public virtual IQueryable<fnProductGroup> fn_ProductGroup(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnProductGroup>("[IqSoftCorePlatformEntities].[fn_ProductGroup](@productId)", productIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_RealTimeInfo")]
        public virtual IQueryable<fnRealTimeInfo> fn_RealTimeInfo(string currency)
        {
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRealTimeInfo>("[IqSoftCorePlatformEntities].[fn_RealTimeInfo](@Currency)", currencyParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Region")]
        public virtual IQueryable<fnRegion> fn_Region(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRegion>("[IqSoftCorePlatformEntities].[fn_Region](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_RegionPath")]
        public virtual IQueryable<fnRegionPath> fn_RegionPath(Nullable<int> regionId)
        {
            var regionIdParameter = regionId.HasValue ?
                new ObjectParameter("regionId", regionId) :
                new ObjectParameter("regionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnRegionPath>("[IqSoftCorePlatformEntities].[fn_RegionPath](@regionId)", regionIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ReportByBetShopOperation")]
        public virtual IQueryable<fnReportByBetShopOperation> fn_ReportByBetShopOperation(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByBetShopOperation>("[IqSoftCorePlatformEntities].[fn_ReportByBetShopOperation](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ReportByPaymentSystem")]
        public virtual IQueryable<fnReportByPaymentSystem> fn_ReportByPaymentSystem(Nullable<long> fromDate, Nullable<long> toDate, Nullable<int> type)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByPaymentSystem>("[IqSoftCorePlatformEntities].[fn_ReportByPaymentSystem](@FromDate, @ToDate, @Type)", fromDateParameter, toDateParameter, typeParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ReportByUserTransaction")]
        public virtual IQueryable<fnReportByUserTransaction> fn_ReportByUserTransaction(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByUserTransaction>("[IqSoftCorePlatformEntities].[fn_ReportByUserTransaction](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ShiftReport")]
        public virtual IQueryable<fnShiftReport> fn_ShiftReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> cashDeskId, Nullable<int> cashierId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var cashDeskIdParameter = cashDeskId.HasValue ?
                new ObjectParameter("CashDeskId", cashDeskId) :
                new ObjectParameter("CashDeskId", typeof(int));
    
            var cashierIdParameter = cashierId.HasValue ?
                new ObjectParameter("CashierId", cashierId) :
                new ObjectParameter("CashierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnShiftReport>("[IqSoftCorePlatformEntities].[fn_ShiftReport](@FromDate, @ToDate, @CashDeskId, @CashierId)", fromDateParameter, toDateParameter, cashDeskIdParameter, cashierIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Transaction")]
        public virtual IQueryable<fnTransaction> fn_Transaction(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnTransaction>("[IqSoftCorePlatformEntities].[fn_Transaction](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Translation")]
        public virtual IQueryable<fnTranslation> fn_Translation(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnTranslation>("[IqSoftCorePlatformEntities].[fn_Translation](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_TranslationEntry")]
        public virtual IQueryable<fnTranslationEntry> fn_TranslationEntry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnTranslationEntry>("[IqSoftCorePlatformEntities].[fn_TranslationEntry]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_User")]
        public virtual IQueryable<fnUser> fn_User()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnUser>("[IqSoftCorePlatformEntities].[fn_User]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_UserCorrection")]
        public virtual IQueryable<fnUserCorrection> fn_UserCorrection()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnUserCorrection>("[IqSoftCorePlatformEntities].[fn_UserCorrection]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_UserLog")]
        public virtual IQueryable<fnUserLog> fn_UserLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnUserLog>("[IqSoftCorePlatformEntities].[fn_UserLog]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_UserPermission")]
        public virtual IQueryable<fnUserPermission> fn_UserPermission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnUserPermission>("[IqSoftCorePlatformEntities].[fn_UserPermission]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_OnlineClient")]
        public virtual IQueryable<fnOnlineClient> fn_OnlineClient(string currency)
        {
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnOnlineClient>("[IqSoftCorePlatformEntities].[fn_OnlineClient](@Currency)", currencyParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_SecurityQuestion")]
        public virtual IQueryable<fnSecurityQuestion> fn_SecurityQuestion(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSecurityQuestion>("[IqSoftCorePlatformEntities].[fn_SecurityQuestion](@LanguageId)", languageIdParameter);
        }
    
        public virtual int sp_GetPaymentRequestLock(Nullable<long> requestId)
        {
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPaymentRequestLock", requestIdParameter);
        }
    
        public virtual int sp_GetAccountLock(Nullable<long> objectId, Nullable<int> objectTypeId, string currencyId, Nullable<int> accountTypeId)
        {
            var objectIdParameter = objectId.HasValue ?
                new ObjectParameter("objectId", objectId) :
                new ObjectParameter("objectId", typeof(long));
    
            var objectTypeIdParameter = objectTypeId.HasValue ?
                new ObjectParameter("objectTypeId", objectTypeId) :
                new ObjectParameter("objectTypeId", typeof(int));
    
            var currencyIdParameter = currencyId != null ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(string));
    
            var accountTypeIdParameter = accountTypeId.HasValue ?
                new ObjectParameter("accountTypeId", accountTypeId) :
                new ObjectParameter("accountTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAccountLock", objectIdParameter, objectTypeIdParameter, currencyIdParameter, accountTypeIdParameter);
        }
    
        public virtual int sp_GetAccountLockById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAccountLockById", idParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ClientProductCommission")]
        public virtual IQueryable<fnClientProductCommission> fn_ClientProductCommission(Nullable<int> productId, Nullable<int> clientId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientProductCommission>("[IqSoftCorePlatformEntities].[fn_ClientProductCommission](@ProductId, @ClientId)", productIdParameter, clientIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ProductCommission")]
        public virtual IQueryable<fnProductCommission> fn_ProductCommission(Nullable<int> productId, Nullable<int> agentId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var agentIdParameter = agentId.HasValue ?
                new ObjectParameter("agentId", agentId) :
                new ObjectParameter("agentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnProductCommission>("[IqSoftCorePlatformEntities].[fn_ProductCommission](@productId, @agentId)", productIdParameter, agentIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Affiliate")]
        public virtual IQueryable<fnAffiliate> fn_Affiliate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAffiliate>("[IqSoftCorePlatformEntities].[fn_Affiliate]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ReportByClientExclusion")]
        public virtual IQueryable<fnReportByClientExclusion> fn_ReportByClientExclusion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByClientExclusion>("[IqSoftCorePlatformEntities].[fn_ReportByClientExclusion]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_AffiliateTransaction")]
        public virtual IQueryable<fnAffiliateTransaction> fn_AffiliateTransaction(Nullable<long> fromDate, Nullable<long> toDate, Nullable<int> affiliateId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            var affiliateIdParameter = affiliateId.HasValue ?
                new ObjectParameter("AffiliateId", affiliateId) :
                new ObjectParameter("AffiliateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAffiliateTransaction>("[IqSoftCorePlatformEntities].[fn_AffiliateTransaction](@FromDate, @ToDate, @AffiliateId)", fromDateParameter, toDateParameter, affiliateIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_MessageTemplate")]
        public virtual IQueryable<fnMessageTemplate> fn_MessageTemplate(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnMessageTemplate>("[IqSoftCorePlatformEntities].[fn_MessageTemplate](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Ticket")]
        public virtual IQueryable<fnTicket> fn_Ticket()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnTicket>("[IqSoftCorePlatformEntities].[fn_Ticket]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ReportByProduct")]
        public virtual IQueryable<fnReportByProduct> fn_ReportByProduct(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByProduct>("[IqSoftCorePlatformEntities].[fn_ReportByProduct](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ClientSession")]
        public virtual IQueryable<fnClientSession> fn_ClientSession()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientSession>("[IqSoftCorePlatformEntities].[fn_ClientSession]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_CashDesksBalances")]
        public virtual IQueryable<fnCashDesksBalances> fn_CashDesksBalances(Nullable<int> betShopId)
        {
            var betShopIdParameter = betShopId.HasValue ?
                new ObjectParameter("betShopId", betShopId) :
                new ObjectParameter("betShopId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCashDesksBalances>("[IqSoftCorePlatformEntities].[fn_CashDesksBalances](@betShopId)", betShopIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Bonus")]
        public virtual IQueryable<fnBonus> fn_Bonus(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnBonus>("[IqSoftCorePlatformEntities].[fn_Bonus](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Banner")]
        public virtual IQueryable<fnBanner> fn_Banner(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnBanner>("[IqSoftCorePlatformEntities].[fn_Banner](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Note")]
        public virtual IQueryable<fnNote> fn_Note()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnNote>("[IqSoftCorePlatformEntities].[fn_Note]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_CommentTemplate")]
        public virtual IQueryable<fnCommentTemplate> fn_CommentTemplate(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCommentTemplate>("[IqSoftCorePlatformEntities].[fn_CommentTemplate](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_PartnerCountrySetting")]
        public virtual IQueryable<fnPartnerCountrySetting> fn_PartnerCountrySetting(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPartnerCountrySetting>("[IqSoftCorePlatformEntities].[fn_PartnerCountrySetting](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ShopWalletClient")]
        public virtual IQueryable<fnShopWalletClient> fn_ShopWalletClient(Nullable<int> betShopId)
        {
            var betShopIdParameter = betShopId.HasValue ?
                new ObjectParameter("betShopId", betShopId) :
                new ObjectParameter("betShopId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnShopWalletClient>("[IqSoftCorePlatformEntities].[fn_ShopWalletClient](@betShopId)", betShopIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Account")]
        public virtual IQueryable<fnAccount> fn_Account(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAccount>("[IqSoftCorePlatformEntities].[fn_Account](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_BetShops")]
        public virtual IQueryable<fnBetShops> fn_BetShops()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnBetShops>("[IqSoftCorePlatformEntities].[fn_BetShops]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_CashDesks")]
        public virtual IQueryable<fnCashDesks> fn_CashDesks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCashDesks>("[IqSoftCorePlatformEntities].[fn_CashDesks]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Correction")]
        public virtual IQueryable<fnCorrection> fn_Correction(Nullable<bool> isClient)
        {
            var isClientParameter = isClient.HasValue ?
                new ObjectParameter("isClient", isClient) :
                new ObjectParameter("isClient", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCorrection>("[IqSoftCorePlatformEntities].[fn_Correction](@isClient)", isClientParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ReportByClientGame")]
        public virtual IQueryable<fnReportByClientGame> fn_ReportByClientGame(Nullable<long> fromDate, Nullable<long> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(long));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnReportByClientGame>("[IqSoftCorePlatformEntities].[fn_ReportByClientGame](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_AffiliateClientInfo")]
        public virtual IQueryable<fnAffiliateClientInfo> fn_AffiliateClientInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAffiliateClientInfo>("[IqSoftCorePlatformEntities].[fn_AffiliateClientInfo]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Announcement")]
        public virtual IQueryable<fnAnnouncement> fn_Announcement(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnAnnouncement>("[IqSoftCorePlatformEntities].[fn_Announcement](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_UserSession")]
        public virtual IQueryable<fnUserSession> fn_UserSession()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnUserSession>("[IqSoftCorePlatformEntities].[fn_UserSession]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Character")]
        public virtual IQueryable<fnCharacter> fn_Character(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnCharacter>("[IqSoftCorePlatformEntities].[fn_Character](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_PartnerProductSetting")]
        public virtual IQueryable<fnPartnerProductSetting> fn_PartnerProductSetting(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPartnerProductSetting>("[IqSoftCorePlatformEntities].[fn_PartnerProductSetting](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_News")]
        public virtual IQueryable<fnNews> fn_News(string languageId, Nullable<bool> withContent)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            var withContentParameter = withContent.HasValue ?
                new ObjectParameter("withContent", withContent) :
                new ObjectParameter("withContent", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnNews>("[IqSoftCorePlatformEntities].[fn_News](@languageId, @withContent)", languageIdParameter, withContentParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ClientBonus")]
        public virtual IQueryable<fnClientBonus> fn_ClientBonus(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientBonus>("[IqSoftCorePlatformEntities].[fn_ClientBonus](@languageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Product")]
        public virtual IQueryable<fnProduct> fn_Product(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnProduct>("[IqSoftCorePlatformEntities].[fn_Product](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Promotion")]
        public virtual IQueryable<fnPromotion> fn_Promotion(string languageId, Nullable<bool> withContent)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("languageId", languageId) :
                new ObjectParameter("languageId", typeof(string));
    
            var withContentParameter = withContent.HasValue ?
                new ObjectParameter("withContent", withContent) :
                new ObjectParameter("withContent", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPromotion>("[IqSoftCorePlatformEntities].[fn_Promotion](@languageId, @withContent)", languageIdParameter, withContentParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_Client")]
        public virtual IQueryable<fnClient> fn_Client()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClient>("[IqSoftCorePlatformEntities].[fn_Client]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_PaymentRequest")]
        public virtual IQueryable<fnPaymentRequest> fn_PaymentRequest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPaymentRequest>("[IqSoftCorePlatformEntities].[fn_PaymentRequest]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_ClientMessage")]
        public virtual IQueryable<fnClientMessage> fn_ClientMessage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnClientMessage>("[IqSoftCorePlatformEntities].[fn_ClientMessage]()");
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_PartnerPaymentSetting")]
        public virtual IQueryable<fnPartnerPaymentSetting> fn_PartnerPaymentSetting(string languageId)
        {
            var languageIdParameter = languageId != null ?
                new ObjectParameter("LanguageId", languageId) :
                new ObjectParameter("LanguageId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnPartnerPaymentSetting>("[IqSoftCorePlatformEntities].[fn_PartnerPaymentSetting](@LanguageId)", languageIdParameter);
        }
    
        [DbFunction("IqSoftCorePlatformEntities", "fn_SegmentClient")]
        public virtual IQueryable<fnSegmentClient> fn_SegmentClient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSegmentClient>("[IqSoftCorePlatformEntities].[fn_SegmentClient]()");
        }
    }
}
